name: Monorepo CI/CD

on:
  push:
    branches: [main, develop]
    tags:
      - '*_v[0-9]+.[0-9]+.[0-9]+' # e.g. inventory-service_v1.0.0
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.21"
  DOTNET_VERSION: "8.0"
  NODE_VERSION: "20"

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.detect.outputs.matrix }}
      changed-projects: ${{ steps.detect.outputs.changed-projects }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install yq
        run: sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq

      - name: Detect changed projects
        id: detect
        run: |
          # Get list of changed files
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          else
            # For push events, compare with previous commit
            if [[ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]]; then
              CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
            else
              # For initial push, check all files
              CHANGED_FILES=$(git ls-files)
            fi
          fi
          echo "Changed files:"
          echo "$CHANGED_FILES"

          MATRIX_JSON='{"include":[]}'
          CHANGED_PROJECT_LIST=""

          # Find all .project.yml files and check if their directory has changed
          for project_file in $(find . -name ".project.yml"); do
            project_dir=$(dirname "$project_file")
            if echo "$CHANGED_FILES" | grep -q "^$project_dir/"; then
              echo "Detected change in: $project_dir"
              
              # Read properties from the .project.yml file
              scope=$(yq e '.scope' $project_file)
              release_name=$(yq e '.release-name' $project_file)
              dockerfile=$(yq e '.dockerfile' $project_file)
              project_type=$(yq e '.type' $project_file)

              # Add to matrix
              project_json=$(jq -n \
                --arg path "$project_dir" \
                --arg scope "$scope" \
                --arg release_name "$release_name" \
                --arg dockerfile "$dockerfile" \
                --arg type "$project_type" \
                '{path: $path, scope: $scope, "release-name": $release_name, dockerfile: $dockerfile, type: $type}')
              
              MATRIX_JSON=$(echo $MATRIX_JSON | jq ".include += [$project_json]")
              CHANGED_PROJECT_LIST="$CHANGED_PROJECT_LIST $scope"
            fi
          done

          echo "matrix=$(echo $MATRIX_JSON | jq -c .)" >> $GITHUB_OUTPUT
          echo "changed-projects=$(echo $CHANGED_PROJECT_LIST | xargs)" >> $GITHUB_OUTPUT

  validate-commit-scope:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: github.event_name == 'pull_request' && needs.detect-changes.outputs.changed-projects != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR commit messages
        id: get-commits
        run: |
          # Fetch commits from the PR
          commits_url="${{ github.event.pull_request.commits_url }}"
          commits=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $commits_url)
          messages=$(echo "$commits" | jq -r '.[].commit.message')
          echo "messages<<EOF" >> $GITHUB_OUTPUT
          echo "$messages" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Validate commit scopes
        id: validate
        run: |
          changed_scopes="${{ needs.detect-changes.outputs.changed-projects }}"
          commit_messages="${{ steps.get-commits.outputs.messages }}"
          
          echo "Changed project scopes: $changed_scopes"
          echo "Commit messages:"
          echo "$commit_messages"

          mismatch=false
          mismatch_details=""

          # Check each commit message
          while IFS= read -r msg; do
            # Extract scope from commit message, e.g. ACTION(SCOPE):
            commit_scope=$(echo "$msg" | grep -oE '^[A-Z_]{4}\(([^)]+)\):' | sed -E 's/^[A-Z_]{4}\(([^)]+)\):/\1/')
            
            if [[ -n "$commit_scope" ]]; then
              # Check if the commit scope is one of the changed project scopes
              if ! echo "$changed_scopes" | grep -q -w "$commit_scope"; then
                mismatch=true
                mismatch_details="$mismatch_details\n- Commit message scope \`$commit_scope\` does not match any of the changed project scopes: \`$changed_scopes\`."
              fi
            fi
          done <<< "$commit_messages"

          if [[ "$mismatch" == "true" ]]; then
            echo "is_mismatch=true" >> $GITHUB_OUTPUT
            echo "details<<EOF" >> $GITHUB_OUTPUT
            echo -e "$mismatch_details" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "is_mismatch=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR about scope mismatch
        if: steps.validate.outputs.is_mismatch == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const details = `${{ steps.validate.outputs.details }}`;
            const body = `
            ## ⚠️ Commit Scope Mismatch Detected

            One or more of your commit messages have a scope that does not match the project directories you have changed.

            **Details:**
            ${details}

            Please ensure your commit message scopes (e.g., \`ACTION(SCOPE): ...\`) correctly reflect the projects being modified. The correct scopes are defined in the \`.project.yml\` file within each project's directory.
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

  build-and-test:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.matrix != '{"include":[]}'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Go Backend Steps ---
      - name: Setup Go
        if: matrix.type == 'go-backend'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Go tests for ${{ matrix.release-name }}
        if: matrix.type == 'go-backend'
        working-directory: ${{ matrix.path }}
        run: |
          go test -v ./...

      - name: Build Go binary for ${{ matrix.release-name }}
        if: matrix.type == 'go-backend'
        working-directory: ${{ matrix.path }}
        run: go build -v -o ../../bin/${{ matrix.release-name }} ./...

      # --- C# Frontend Steps ---
      - name: Setup .NET
        if: matrix.type == 'csharp-frontend'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Run .NET tests for ${{ matrix.release-name }}
        if: matrix.type == 'csharp-frontend'
        working-directory: ${{ matrix.path }}
        run: dotnet test

      - name: Build .NET project for ${{ matrix.release-name }}
        if: matrix.type == 'csharp-frontend'
        working-directory: ${{ matrix.path }}
        run: dotnet build --configuration Release --no-restore

      # --- Web Frontend Steps ---
      - name: Setup Node.js
        if: matrix.type == 'web-frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Build Web project for ${{ matrix.release-name }}
        if: matrix.type == 'web-frontend'
        working-directory: ${{ matrix.path }}
        run: |
          npm install
          npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.release-name }}
          path: bin/${{ matrix.release-name }} # Adjust path as needed
          retention-days: 1

  version-and-publish:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.detect-changes.outputs.matrix != '{"include":[]}'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.release-name }}
          path: bin/

      - name: Make binary executable
        run: chmod +x bin/*

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Determine Version
        id: version
        run: |
          # Get the latest tag for this project
          latest_tag=$(git tag -l "${{ matrix.release-name }}_v*" --sort=-version:refname | head -n 1)
          
          if [[ -z "$latest_tag" ]]; then
            base_version="0.0.0"
            echo "No previous tag found for ${{ matrix.release-name }}. Starting with v0.0.1."
            commits_since_tag=$(git log --pretty=format:"%s" -- ${{ matrix.path }})
          else
            base_version=$(echo "$latest_tag" | sed 's/.*_v//')
            echo "Latest tag for ${{ matrix.release-name }} is $latest_tag. Base version is $base_version."
            commits_since_tag=$(git log $latest_tag..HEAD --pretty=format:"%s" -- ${{ matrix.path }})
          fi

          IFS='.' read -r major minor patch <<< "$base_version"

          # Analyze commit messages for this project to determine version bump
          has_breaking=false
          has_feature=false
          has_patch=false

          while IFS= read -r msg; do
            if echo "$msg" | grep -q "(${_scope})"; then
              if echo "$msg" | grep -q "!"; then has_breaking=true; fi
              if echo "$msg" | grep -qE "^FEAT"; then has_feature=true; fi
              if echo "$msg" | grep -qE "^(FIX_|ENH_)"; then has_patch=true; fi
            fi
          done <<< "$commits_since_tag"

          if [[ "$has_breaking" == "true" ]]; then
            major=$((major + 1)); minor=0; patch=0
          elif [[ "$has_feature" == "true" ]]; then
            minor=$((minor + 1)); patch=0
          elif [[ "$has_patch" == "true" ]]; then
            patch=$((patch + 1))
          else
            # If no relevant commits, don't create a new version
            echo "No version change for ${{ matrix.release-name }}"
            echo "version=none" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          new_version="$major.$minor.$patch"
          echo "New version for ${{ matrix.release-name }}: $new_version"
          echo "version=$new_version" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        if: steps.version.outputs.version != 'none'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.release-name }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.release-name }}:${{ steps.version.outputs.version }}
          labels: |
            org.opencontainers.image.title=${{ matrix.release-name }}
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Create Git Tag
        if: steps.version.outputs.version != 'none'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "${{ matrix.release-name }}_v${{ steps.version.outputs.version }}"
          git push origin "${{ matrix.release-name }}_v${{ steps.version.outputs.version }}"
