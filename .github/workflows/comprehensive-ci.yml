name: Monorepo CI/CD

on:
  milestone:
    types: [closed]
  workflow_dispatch:
    inputs:
      project:
        description: 'Project to release (or "all")'
        required: true
        default: "all"
        type: choice
        options:
          - all
          - user-core-backend
          - tasker-core-backend
          - inventory-core-backend
          - inventory-core-frontend
          - home-manager-backend
          - home-manager-frontend
      supermajor_version:
        description: "Set a specific SUPERMAJOR version (e.g., 1, 2). Resets other versions."
        required: false
        type: string
      major_bump:
        description: "Force a MAJOR version bump (for release bundles). Resets minor/patch."
        required: false
        type: boolean
      dry_run:
        description: "Run without creating tags or pushing images"
        required: true
        default: true
        type: boolean
  push:
    branches: [main, develop]
    tags:
      - "*_v[0-9]+.[0-9]+.[0-9]+.[a-z]+" # e.g. inventory-service_v1.2.3.a
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.21"
  DOTNET_VERSION: "8.0"
  NODE_VERSION: "20"

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.detect.outputs.matrix }}
      changed-projects: ${{ steps.detect.outputs.changed-projects }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install yq
        run: sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq

      - name: Detect projects
        id: detect
        env:
          MILESTONE_TITLE: ${{ github.event.milestone.title }}
        run: |
          MATRIX_JSON='{"include":[]}'
          CHANGED_PROJECT_LIST=""

          # Milestone trigger logic
          if [[ "${{ github.event_name }}" == "milestone" ]]; then
            echo "Milestone closed: $MILESTONE_TITLE. Triggering MAJOR bump for all projects."
            # Find all .project.yml files
            for project_file in $(find . -name ".project.yml"); do
              project_dir=$(dirname "$project_file")
              scope=$(yq e '.scope' $project_file)
              release_name=$(yq e '.release-name' $project_file)
              dockerfile=$(yq e '.dockerfile' $project_file)
              project_type=$(yq e '.type' $project_file)
              project_json=$(jq -n --arg path "$project_dir" --arg scope "$scope" --arg release_name "$release_name" --arg dockerfile "$dockerfile" --arg type "$project_type" '{path: $path, scope: $scope, "release-name": $release_name, dockerfile: $dockerfile, type: $type}')
              MATRIX_JSON=$(echo $MATRIX_JSON | jq ".include += [$project_json]")
              CHANGED_PROJECT_LIST="$CHANGED_PROJECT_LIST $scope"
            done
          # Manual trigger logic
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Manual trigger for project: ${{ github.event.inputs.project }}"
            if [[ "${{ github.event.inputs.project }}" == "all" ]]; then
              # Find all .project.yml files
              for project_file in $(find . -name ".project.yml"); do
                project_dir=$(dirname "$project_file")
                scope=$(yq e '.scope' $project_file)
                release_name=$(yq e '.release-name' $project_file)
                dockerfile=$(yq e '.dockerfile' $project_file)
                project_type=$(yq e '.type' $project_file)
                project_json=$(jq -n --arg path "$project_dir" --arg scope "$scope" --arg release_name "$release_name" --arg dockerfile "$dockerfile" --arg type "$project_type" '{path: $path, scope: $scope, "release-name": $release_name, dockerfile: $dockerfile, type: $type}')
                MATRIX_JSON=$(echo $MATRIX_JSON | jq ".include += [$project_json]")
                CHANGED_PROJECT_LIST="$CHANGED_PROJECT_LIST $scope"
              done
            else
              # Find the specific project's .project.yml
              project_release_name="${{ github.event.inputs.project }}"
              project_file=$(find . -name ".project.yml" -exec grep -l "release-name: ${project_release_name}" {} +)
              if [[ -n "$project_file" ]]; then
                project_dir=$(dirname "$project_file")
                scope=$(yq e '.scope' $project_file)
                release_name=$(yq e '.release-name' $project_file)
                dockerfile=$(yq e '.dockerfile' $project_file)
                project_type=$(yq e '.type' $project_file)
                project_json=$(jq -n --arg path "$project_dir" --arg scope "$scope" --arg release_name "$release_name" --arg dockerfile "$dockerfile" --arg type "$project_type" '{path: $path, scope: $scope, "release-name": $release_name, dockerfile: $dockerfile, type: $type}')
                MATRIX_JSON=$(echo $MATRIX_JSON | jq ".include += [$project_json]")
                CHANGED_PROJECT_LIST="$CHANGED_PROJECT_LIST $scope"
              else
                echo "Could not find a .project.yml for release-name: $project_release_name"
                exit 1
              fi
            fi
          else
            # Automated trigger logic (push or PR)
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
            elif [[ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]]; then
              CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
            else
              CHANGED_FILES=$(git ls-files)
            fi
            echo "Changed files:"
            echo "$CHANGED_FILES"

            for project_file in $(find . -name ".project.yml"); do
              project_dir=$(dirname "$project_file")
              # Check if any changed file is within the project directory
              if echo "$CHANGED_FILES" | grep -q "^${project_dir#./}/"; then
                echo "Detected change in: $project_dir"
                scope=$(yq e '.scope' $project_file)
                release_name=$(yq e '.release-name' $project_file)
                dockerfile=$(yq e '.dockerfile' $project_file)
                project_type=$(yq e '.type' $project_file)
                project_json=$(jq -n --arg path "$project_dir" --arg scope "$scope" --arg release_name "$release_name" --arg dockerfile "$dockerfile" --arg type "$project_type" '{path: $path, scope: $scope, "release-name": $release_name, dockerfile: $dockerfile, type: $type}')
                MATRIX_JSON=$(echo $MATRIX_JSON | jq ".include += [$project_json]")
                CHANGED_PROJECT_LIST="$CHANGED_PROJECT_LIST $scope"
              fi
            done
          fi

          echo "matrix=$(echo $MATRIX_JSON | jq -c .)" >> $GITHUB_OUTPUT
          echo "changed-projects=$(echo $CHANGED_PROJECT_LIST | xargs)" >> $GITHUB_OUTPUT

  validate-commit-scope:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: github.event_name == 'pull_request' && needs.detect-changes.outputs.changed-projects != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR commit messages
        id: get-commits
        run: |
          # Fetch commits from the PR
          commits_url="${{ github.event.pull_request.commits_url }}"
          commits=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $commits_url)
          messages=$(echo "$commits" | jq -r '.[].commit.message')
          echo "messages<<EOF" >> $GITHUB_OUTPUT
          echo "$messages" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Validate commit scopes
        id: validate
        run: |
          changed_scopes="${{ needs.detect-changes.outputs.changed-projects }}"
          commit_messages="${{ steps.get-commits.outputs.messages }}"

          echo "Changed project scopes: $changed_scopes"
          echo "Commit messages:"
          echo "$commit_messages"

          mismatch=false
          mismatch_details=""

          # Check each commit message
          while IFS= read -r msg; do
            # Extract scope from commit message, e.g. ACTION(SCOPE):
            commit_scope=$(echo "$msg" | grep -oE '^[A-Z_]{4}\(([^)]+)\):' | sed -E 's/^[A-Z_]{4}\(([^)]+)\):/\1/')
            
            if [[ -n "$commit_scope" ]]; then
              # Check if the commit scope is one of the changed project scopes
              if ! echo "$changed_scopes" | grep -q -w "$commit_scope"; then
                mismatch=true
                mismatch_details="$mismatch_details\n- Commit message scope \`$commit_scope\` does not match any of the changed project scopes: \`$changed_scopes\`."
              fi
            fi
          done <<< "$commit_messages"

          if [[ "$mismatch" == "true" ]]; then
            echo "is_mismatch=true" >> $GITHUB_OUTPUT
            echo "details<<EOF" >> $GITHUB_OUTPUT
            echo -e "$mismatch_details" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "is_mismatch=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR about scope mismatch
        if: steps.validate.outputs.is_mismatch == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const details = `${{ steps.validate.outputs.details }}`;
            const body = `
            ## ⚠️ Commit Scope Mismatch Detected

            One or more of your commit messages have a scope that does not match the project directories you have changed.

            **Details:**
            ${details}

            Please ensure your commit message scopes (e.g., \`ACTION(SCOPE): ...\`) correctly reflect the projects being modified. The correct scopes are defined in the \`.project.yml\` file within each project's directory.
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

  build-and-test:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.matrix != '{"include":[]}'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Go Backend Steps ---
      - name: Setup Go
        if: matrix.type == 'go-backend'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Go tests for ${{ matrix.release-name }}
        if: matrix.type == 'go-backend'
        working-directory: ${{ matrix.path }}
        run: |
          go test -v ./...

      - name: Build Go binary for ${{ matrix.release-name }}
        if: matrix.type == 'go-backend'
        working-directory: ${{ matrix.path }}
        run: go build -v -o ../../bin/${{ matrix.release-name }} ./...

      # --- C# Frontend Steps ---
      - name: Setup .NET
        if: matrix.type == 'csharp-frontend'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Run .NET tests for ${{ matrix.release-name }}
        if: matrix.type == 'csharp-frontend'
        working-directory: ${{ matrix.path }}
        run: dotnet test

      - name: Build .NET project for ${{ matrix.release-name }}
        if: matrix.type == 'csharp-frontend'
        working-directory: ${{ matrix.path }}
        run: dotnet build --configuration Release --no-restore

      # --- Web Frontend Steps ---
      - name: Setup Node.js
        if: matrix.type == 'web-frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build Web project for ${{ matrix.release-name }}
        if: matrix.type == 'web-frontend'
        working-directory: ${{ matrix.path }}
        run: |
          npm install
          npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.release-name }}
          path: bin/${{ matrix.release-name }} # Adjust path as needed
          retention-days: 1

  version-and-publish:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.detect-changes.outputs.matrix != '{"include":[]}') ||
      (github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'milestone')
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.release-name }}
          path: bin/

      - name: Make binary executable
        if: matrix.type == 'go-backend'
        run: chmod +x bin/*

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event.inputs.dry_run == 'false' || github.event_name != 'workflow_dispatch'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Determine Version
        id: version
        env:
          SUPERMAJOR_MANUAL: ${{ github.event.inputs.supermajor_version }}
          MAJOR_BUMP_MANUAL: ${{ github.event.inputs.major_bump }}
          IS_MILESTONE_EVENT: ${{ github.event_name == 'milestone' }}
        run: |
          # Function to convert number (0-25) to a-z
          num_to_alpha() {
            local num=$1
            awk -v n="$num" 'BEGIN { printf "%c", 97 + n }'
          }

          # Function to convert a-z to number (0-25)
          alpha_to_num() {
            local alpha=$1
            awk -v a="$alpha" 'BEGIN { printf "%d", index("abcdefghijklmnopqrstuvwxyz", a) - 1 }'
          }

          # Get the latest tag for this project, e.g., my-service_v1.2.3.a
          latest_tag=$(git tag -l "${{ matrix.release-name }}_v*" --sort=-version:refname | head -n 1)

          supermajor=0
          major=0
          minor=0
          patch_num=-1 # -1 signifies no patch yet

          if [[ -z "$latest_tag" ]]; then
            echo "No previous tag found for ${{ matrix.release-name }}. Starting with v0.1.0.a."
            supermajor=0; major=1; minor=0; patch_num=-1
            commits_since_tag=$(git log --pretty=format:"%H" -- ${{ matrix.path }})
          else
            # Extract version parts from tag like '..._v1.2.3.b'
            version_part=$(echo "$latest_tag" | sed 's/.*_v//')
            supermajor=$(echo "$version_part" | cut -d. -f1)
            major=$(echo "$version_part" | cut -d. -f2)
            minor=$(echo "$version_part" | cut -d. -f3)
            patch_alpha=$(echo "$version_part" | cut -d. -f4)
            patch_num=$(alpha_to_num "$patch_alpha")
            echo "Latest tag for ${{ matrix.release-name }} is $latest_tag. Base version is v$supermajor.$major.$minor.$patch_alpha."
            commits_since_tag=$(git log $latest_tag..HEAD --pretty=format:"%H" -- ${{ matrix.path }})
          fi

          # --- Manual Overrides & Milestone Trigger ---
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ -n "$SUPERMAJOR_MANUAL" ]]; then
              echo "Manual SUPERMAJOR override: setting version to $SUPERMAJOR_MANUAL.0.0.a"
              supermajor=$SUPERMAJOR_MANUAL; major=0; minor=0; patch_num=-1
              new_version="$supermajor.$major.$minor.$(num_to_alpha 0)"
              echo "version=$new_version" >> $GITHUB_OUTPUT
              exit 0
            fi
            if [[ "$MAJOR_BUMP_MANUAL" == "true" ]]; then
              echo "Manual MAJOR bump: incrementing major version."
              major=$((major + 1)); minor=0; patch_num=-1
              new_version="$supermajor.$major.$minor.$(num_to_alpha 0)"
              echo "version=$new_version" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi

          if [[ "$IS_MILESTONE_EVENT" == "true" ]]; then
              echo "Milestone closure: incrementing major version."
              major=$((major + 1)); minor=0; patch_num=-1
              new_version="$supermajor.$major.$minor.$(num_to_alpha 0)"
              echo "version=$new_version" >> $GITHUB_OUTPUT
              exit 0
          fi

          # --- Automated Versioning based on Commits ---
          if [[ -z "$commits_since_tag" ]]; then
              echo "No new commits for ${{ matrix.release-name }}. No version change."
              echo "version=none" >> $GITHUB_OUTPUT
              exit 0
          fi

          has_breaking=false
          has_minor=false
          has_patch=false

          # Correctly handle the path for grep
          project_path="${{ matrix.path }}"
          project_path=${project_path#./}

          for commit_hash in $commits_since_tag; do
            msg=$(git show -s --format=%s $commit_hash)
            # Check if commit is relevant to the current project
            if git show -s --name-only --format=tformat: $commit_hash | grep -q "^${project_path}/"; then
                if echo "$msg" | grep -q "!"; then has_breaking=true; fi
                if echo "$msg" | grep -qE "^(FEAT|FIX_)"; then has_minor=true; fi
                if echo "$msg" | grep -qE "^(ENH_)"; then has_patch=true; fi
            fi
          done

          if [[ "$has_breaking" == "true" ]]; then
            major=$((major + 1)); minor=0; patch_num=-1
          elif [[ "$has_minor" == "true" ]]; then
            minor=$((minor + 1)); patch_num=-1
          elif [[ "$has_patch" == "true" ]]; then
            patch_num=$((patch_num + 1))
          else
            echo "No version-bumping commits for ${{ matrix.release-name }}. No version change."
            echo "version=none" >> $GITHUB_OUTPUT
            exit 0
          fi

          # If patch_num is -1, it means it was reset, so start at 'a' (0)
          if [[ $patch_num -lt 0 ]]; then
            patch_num=0
          fi

          new_patch_alpha=$(num_to_alpha $patch_num)
          new_version="$supermajor.$major.$minor.$new_patch_alpha"
          echo "New version for ${{ matrix.release-name }}: $new_version"
          echo "version=$new_version" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        if: steps.version.outputs.version != 'none'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event.inputs.dry_run == 'false' || github.event_name != 'workflow_dispatch' }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.release-name }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.release-name }}:${{ steps.version.outputs.version }}
          labels: |
            org.opencontainers.image.title=${{ matrix.release-name }}
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Create Git Tag
        if: steps.version.outputs.version != 'none' && (github.event.inputs.dry_run == 'false' || github.event_name != 'workflow_dispatch')
        run: |
          echo "Creating git tag ${{ matrix.release-name }}_v${{ steps.version.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "${{ matrix.release-name }}_v${{ steps.version.outputs.version }}"
          git push origin "${{ matrix.release-name }}_v${{ steps.version.outputs.version }}"

      - name: Dry Run Summary
        if: steps.version.outputs.version != 'none' && github.event.inputs.dry_run == 'true' && github.event_name == 'workflow_dispatch'
        run: |
          echo "DRY RUN: Would have created tag ${{ matrix.release-name }}_v${{ steps.version.outputs.version }}"
          echo "DRY RUN: Would have pushed image ${{ secrets.DOCKER_USERNAME }}/${{ matrix.release-name }}:${{ steps.version.outputs.version }}"
