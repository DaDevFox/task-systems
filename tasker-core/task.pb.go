// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: task.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TaskStage defines the lifecycle stages of a task.
// Tasks flow through these stages in their lifecycle:
// PENDING -> INBOX -> STAGING -> ACTIVE -> ARCHIVED
type TaskStage int32

const (
	TaskStage_STAGE_UNSPECIFIED TaskStage = 0 // Default/unset value
	TaskStage_STAGE_PENDING     TaskStage = 1 // Task created but not yet in inbox
	TaskStage_STAGE_INBOX       TaskStage = 2 // Task waiting to be organized (limited capacity)
	TaskStage_STAGE_STAGING     TaskStage = 3 // Task being prepared for work (dependencies, scheduling)
	TaskStage_STAGE_ACTIVE      TaskStage = 4 // Task currently being worked on
	TaskStage_STAGE_ARCHIVED    TaskStage = 5 // Task completed and archived
)

// Enum value maps for TaskStage.
var (
	TaskStage_name = map[int32]string{
		0: "STAGE_UNSPECIFIED",
		1: "STAGE_PENDING",
		2: "STAGE_INBOX",
		3: "STAGE_STAGING",
		4: "STAGE_ACTIVE",
		5: "STAGE_ARCHIVED",
	}
	TaskStage_value = map[string]int32{
		"STAGE_UNSPECIFIED": 0,
		"STAGE_PENDING":     1,
		"STAGE_INBOX":       2,
		"STAGE_STAGING":     3,
		"STAGE_ACTIVE":      4,
		"STAGE_ARCHIVED":    5,
	}
)

func (x TaskStage) Enum() *TaskStage {
	p := new(TaskStage)
	*p = x
	return p
}

func (x TaskStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStage) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[0].Descriptor()
}

func (TaskStage) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[0]
}

func (x TaskStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStage.Descriptor instead.
func (TaskStage) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{0}
}

// TaskStatus defines the detailed status within a stage.
// Provides granular tracking of task progress within each stage.
type TaskStatus int32

const (
	TaskStatus_TASK_STATUS_UNSPECIFIED TaskStatus = 0 // Default, unset value
	TaskStatus_TASK_STATUS_TODO        TaskStatus = 1
	TaskStatus_TASK_STATUS_IN_PROGRESS TaskStatus = 2
	TaskStatus_TASK_STATUS_PAUSED      TaskStatus = 3
	TaskStatus_TASK_STATUS_BLOCKED     TaskStatus = 4
	TaskStatus_TASK_STATUS_COMPLETED   TaskStatus = 5
	TaskStatus_TASK_STATUS_CANCELLED   TaskStatus = 6
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "TASK_STATUS_UNSPECIFIED",
		1: "TASK_STATUS_TODO",
		2: "TASK_STATUS_IN_PROGRESS",
		3: "TASK_STATUS_PAUSED",
		4: "TASK_STATUS_BLOCKED",
		5: "TASK_STATUS_COMPLETED",
		6: "TASK_STATUS_CANCELLED",
	}
	TaskStatus_value = map[string]int32{
		"TASK_STATUS_UNSPECIFIED": 0,
		"TASK_STATUS_TODO":        1,
		"TASK_STATUS_IN_PROGRESS": 2,
		"TASK_STATUS_PAUSED":      3,
		"TASK_STATUS_BLOCKED":     4,
		"TASK_STATUS_COMPLETED":   5,
		"TASK_STATUS_CANCELLED":   6,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[1].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[1]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{1}
}

// TagType defines the type of value stored in a tag.
// Supports different data types for rich task metadata.
type TagType int32

const (
	TagType_TAG_TYPE_UNSPECIFIED TagType = 0 // Default/unset value
	TagType_TAG_TYPE_TEXT        TagType = 1 // Simple text value
	TagType_TAG_TYPE_LOCATION    TagType = 2 // Geographic location
	TagType_TAG_TYPE_TIME        TagType = 3 // Timestamp value
)

// Enum value maps for TagType.
var (
	TagType_name = map[int32]string{
		0: "TAG_TYPE_UNSPECIFIED",
		1: "TAG_TYPE_TEXT",
		2: "TAG_TYPE_LOCATION",
		3: "TAG_TYPE_TIME",
	}
	TagType_value = map[string]int32{
		"TAG_TYPE_UNSPECIFIED": 0,
		"TAG_TYPE_TEXT":        1,
		"TAG_TYPE_LOCATION":    2,
		"TAG_TYPE_TIME":        3,
	}
)

func (x TagType) Enum() *TagType {
	p := new(TagType)
	*p = x
	return p
}

func (x TagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TagType) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[2].Descriptor()
}

func (TagType) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[2]
}

func (x TagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TagType.Descriptor instead.
func (TagType) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{2}
}

// Notification types
type NotificationType int32

const (
	NotificationType_NOTIFICATION_TYPE_UNSPECIFIED  NotificationType = 0
	NotificationType_NOTIFICATION_ON_ASSIGN         NotificationType = 1
	NotificationType_NOTIFICATION_ON_START          NotificationType = 2
	NotificationType_NOTIFICATION_N_DAYS_BEFORE_DUE NotificationType = 3
)

// Enum value maps for NotificationType.
var (
	NotificationType_name = map[int32]string{
		0: "NOTIFICATION_TYPE_UNSPECIFIED",
		1: "NOTIFICATION_ON_ASSIGN",
		2: "NOTIFICATION_ON_START",
		3: "NOTIFICATION_N_DAYS_BEFORE_DUE",
	}
	NotificationType_value = map[string]int32{
		"NOTIFICATION_TYPE_UNSPECIFIED":  0,
		"NOTIFICATION_ON_ASSIGN":         1,
		"NOTIFICATION_ON_START":          2,
		"NOTIFICATION_N_DAYS_BEFORE_DUE": 3,
	}
)

func (x NotificationType) Enum() *NotificationType {
	p := new(NotificationType)
	*p = x
	return p
}

func (x NotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[3].Descriptor()
}

func (NotificationType) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[3]
}

func (x NotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationType.Descriptor instead.
func (NotificationType) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{3}
}

// User information
type User struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Email                string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Name                 string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	GoogleCalendarToken  string                 `protobuf:"bytes,4,opt,name=google_calendar_token,json=googleCalendarToken,proto3" json:"google_calendar_token,omitempty"`
	NotificationSettings []*NotificationSetting `protobuf:"bytes,5,rep,name=notification_settings,json=notificationSettings,proto3" json:"notification_settings,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_task_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetGoogleCalendarToken() string {
	if x != nil {
		return x.GoogleCalendarToken
	}
	return ""
}

func (x *User) GetNotificationSettings() []*NotificationSetting {
	if x != nil {
		return x.NotificationSettings
	}
	return nil
}

// Notification settings per user
type NotificationSetting struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          NotificationType       `protobuf:"varint,1,opt,name=type,proto3,enum=taskcore.v1.NotificationType" json:"type,omitempty"`
	Enabled       bool                   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	DaysBefore    int32                  `protobuf:"varint,3,opt,name=days_before,json=daysBefore,proto3" json:"days_before,omitempty"` // For N_DAYS_BEFORE_DUE type
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotificationSetting) Reset() {
	*x = NotificationSetting{}
	mi := &file_task_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationSetting) ProtoMessage() {}

func (x *NotificationSetting) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationSetting.ProtoReflect.Descriptor instead.
func (*NotificationSetting) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{1}
}

func (x *NotificationSetting) GetType() NotificationType {
	if x != nil {
		return x.Type
	}
	return NotificationType_NOTIFICATION_TYPE_UNSPECIFIED
}

func (x *NotificationSetting) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *NotificationSetting) GetDaysBefore() int32 {
	if x != nil {
		return x.DaysBefore
	}
	return 0
}

// Geographic location for location tags
type GeographicLocation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Latitude      float64                `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     float64                `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Address       string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeographicLocation) Reset() {
	*x = GeographicLocation{}
	mi := &file_task_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeographicLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeographicLocation) ProtoMessage() {}

func (x *GeographicLocation) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeographicLocation.ProtoReflect.Descriptor instead.
func (*GeographicLocation) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{2}
}

func (x *GeographicLocation) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GeographicLocation) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GeographicLocation) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// TagValue represents a typed value that can be attached to tasks as metadata.
// Supports multiple data types for rich task categorization and filtering.
type TagValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  TagType                `protobuf:"varint,1,opt,name=type,proto3,enum=taskcore.v1.TagType" json:"type,omitempty"` // Type discriminator
	// Types that are valid to be assigned to Value:
	//
	//	*TagValue_TextValue
	//	*TagValue_LocationValue
	//	*TagValue_TimeValue
	Value         isTagValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagValue) Reset() {
	*x = TagValue{}
	mi := &file_task_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagValue) ProtoMessage() {}

func (x *TagValue) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagValue.ProtoReflect.Descriptor instead.
func (*TagValue) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{3}
}

func (x *TagValue) GetType() TagType {
	if x != nil {
		return x.Type
	}
	return TagType_TAG_TYPE_UNSPECIFIED
}

func (x *TagValue) GetValue() isTagValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TagValue) GetTextValue() string {
	if x != nil {
		if x, ok := x.Value.(*TagValue_TextValue); ok {
			return x.TextValue
		}
	}
	return ""
}

func (x *TagValue) GetLocationValue() *GeographicLocation {
	if x != nil {
		if x, ok := x.Value.(*TagValue_LocationValue); ok {
			return x.LocationValue
		}
	}
	return nil
}

func (x *TagValue) GetTimeValue() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Value.(*TagValue_TimeValue); ok {
			return x.TimeValue
		}
	}
	return nil
}

type isTagValue_Value interface {
	isTagValue_Value()
}

type TagValue_TextValue struct {
	TextValue string `protobuf:"bytes,2,opt,name=text_value,json=textValue,proto3,oneof"` // Text content (for TAG_TYPE_TEXT)
}

type TagValue_LocationValue struct {
	LocationValue *GeographicLocation `protobuf:"bytes,3,opt,name=location_value,json=locationValue,proto3,oneof"` // Location data (for TAG_TYPE_LOCATION)
}

type TagValue_TimeValue struct {
	TimeValue *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time_value,json=timeValue,proto3,oneof"` // Timestamp (for TAG_TYPE_TIME)
}

func (*TagValue_TextValue) isTagValue_Value() {}

func (*TagValue_LocationValue) isTagValue_Value() {}

func (*TagValue_TimeValue) isTagValue_Value() {}

// Point represents a unit of work that can be tracked and completed.
// Used for measuring progress and effort estimation.
type Point struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`  // Human-readable name for this point (e.g., "research", "implementation")
	Value         uint32                 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"` // Numeric weight/effort value
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Point) Reset() {
	*x = Point{}
	mi := &file_task_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{4}
}

func (x *Point) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Point) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// WorkInterval represents a scheduled period of work on a task.
// Tracks when work was done and what was accomplished.
type WorkInterval struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Start           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`                                            // When work began
	Stop            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=stop,proto3" json:"stop,omitempty"`                                              // When work ended
	PointsCompleted []*Point               `protobuf:"bytes,3,rep,name=points_completed,json=pointsCompleted,proto3" json:"points_completed,omitempty"` // Points completed during this interval
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *WorkInterval) Reset() {
	*x = WorkInterval{}
	mi := &file_task_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkInterval) ProtoMessage() {}

func (x *WorkInterval) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkInterval.ProtoReflect.Descriptor instead.
func (*WorkInterval) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{5}
}

func (x *WorkInterval) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *WorkInterval) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *WorkInterval) GetPointsCompleted() []*Point {
	if x != nil {
		return x.PointsCompleted
	}
	return nil
}

// Schedule contains timing and work scheduling information for a task.
// Supports both due dates and detailed work interval tracking.
type Schedule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkIntervals []*WorkInterval        `protobuf:"bytes,1,rep,name=work_intervals,json=workIntervals,proto3" json:"work_intervals,omitempty"` // History of work periods
	Due           *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=due,proto3" json:"due,omitempty"`                                          // When task should be completed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	mi := &file_task_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{6}
}

func (x *Schedule) GetWorkIntervals() []*WorkInterval {
	if x != nil {
		return x.WorkIntervals
	}
	return nil
}

func (x *Schedule) GetDue() *timestamppb.Timestamp {
	if x != nil {
		return x.Due
	}
	return nil
}

// StatusUpdate represents a timestamped status change or note.
// Provides audit trail and communication history for tasks.
type StatusUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Time          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`     // When update was made
	Update        string                 `protobuf:"bytes,2,opt,name=update,proto3" json:"update,omitempty"` // Description of status change
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusUpdate) Reset() {
	*x = StatusUpdate{}
	mi := &file_task_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusUpdate) ProtoMessage() {}

func (x *StatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusUpdate.ProtoReflect.Descriptor instead.
func (*StatusUpdate) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{7}
}

func (x *StatusUpdate) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *StatusUpdate) GetUpdate() string {
	if x != nil {
		return x.Update
	}
	return ""
}

// Status tracks the history of status updates for a task.
// Maintains chronological record of all task changes.
type Status struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Updates       []*StatusUpdate        `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"` // Chronological list of updates
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Status) Reset() {
	*x = Status{}
	mi := &file_task_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{8}
}

func (x *Status) GetUpdates() []*StatusUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

// Task represents a single unit of work in the system.
// Tasks are the core entity, containing all information needed for planning,
// execution, tracking, and completion of work items.
type Task struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Id                    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                // Unique identifier (8-char hex)
	Name                  string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                            // Human-readable task name
	Description           string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                                              // Detailed description of work to be done
	Stage                 TaskStage              `protobuf:"varint,4,opt,name=stage,proto3,enum=taskcore.v1.TaskStage" json:"stage,omitempty"`                                              // Current lifecycle stage
	Status                TaskStatus             `protobuf:"varint,5,opt,name=status,proto3,enum=taskcore.v1.TaskStatus" json:"status,omitempty"`                                           // Detailed status within stage
	Location              []string               `protobuf:"bytes,6,rep,name=location,proto3" json:"location,omitempty"`                                                                    // Hierarchical organizational path (e.g., ["project", "backend", "auth"])
	Points                []*Point               `protobuf:"bytes,7,rep,name=points,proto3" json:"points,omitempty"`                                                                        // Work units that need to be completed
	Schedule              *Schedule              `protobuf:"bytes,8,opt,name=schedule,proto3" json:"schedule,omitempty"`                                                                    // Timing and work interval information
	StatusHistory         *Status                `protobuf:"bytes,9,opt,name=status_history,json=statusHistory,proto3" json:"status_history,omitempty"`                                     // Audit trail of all status changes
	Tags                  map[string]*TagValue   `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // User-configurable metadata and categorization
	Inflows               []string               `protobuf:"bytes,11,rep,name=inflows,proto3" json:"inflows,omitempty"`                                                                     // Task IDs this task depends on (must complete first)
	Outflows              []string               `protobuf:"bytes,12,rep,name=outflows,proto3" json:"outflows,omitempty"`                                                                   // Task IDs that depend on this task
	UserId                string                 `protobuf:"bytes,13,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                         // ID of the user who owns/assigned to this task
	GoogleCalendarEventId string                 `protobuf:"bytes,14,opt,name=google_calendar_event_id,json=googleCalendarEventId,proto3" json:"google_calendar_event_id,omitempty"`        // Associated Google Calendar event (for sync)
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                // When task was originally created
	UpdatedAt             *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                // When task was last modified
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_task_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{9}
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Task) GetStage() TaskStage {
	if x != nil {
		return x.Stage
	}
	return TaskStage_STAGE_UNSPECIFIED
}

func (x *Task) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_TASK_STATUS_UNSPECIFIED
}

func (x *Task) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Task) GetPoints() []*Point {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *Task) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *Task) GetStatusHistory() *Status {
	if x != nil {
		return x.StatusHistory
	}
	return nil
}

func (x *Task) GetTags() map[string]*TagValue {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Task) GetInflows() []string {
	if x != nil {
		return x.Inflows
	}
	return nil
}

func (x *Task) GetOutflows() []string {
	if x != nil {
		return x.Outflows
	}
	return nil
}

func (x *Task) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Task) GetGoogleCalendarEventId() string {
	if x != nil {
		return x.GoogleCalendarEventId
	}
	return ""
}

func (x *Task) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Task) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// AddTaskRequest creates a new task with basic information.
// Task will be created in PENDING stage and moved to INBOX automatically.
type AddTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                   // Required: Human-readable task name
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`     // Optional: Detailed description
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // Optional: User to assign task (defaults to current user)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTaskRequest) Reset() {
	*x = AddTaskRequest{}
	mi := &file_task_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTaskRequest) ProtoMessage() {}

func (x *AddTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTaskRequest.ProtoReflect.Descriptor instead.
func (*AddTaskRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{10}
}

func (x *AddTaskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddTaskRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddTaskRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// AddTaskResponse returns the newly created task.
type AddTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"` // The created task with generated ID and timestamps
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTaskResponse) Reset() {
	*x = AddTaskResponse{}
	mi := &file_task_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTaskResponse) ProtoMessage() {}

func (x *AddTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTaskResponse.ProtoReflect.Descriptor instead.
func (*AddTaskResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{11}
}

func (x *AddTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

// UpdateTaskTagsRequest modifies the metadata tags on a task.
// Used for categorization, priority, custom fields, etc.
type UpdateTaskTagsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                               // Required: Task to update
	Tags          map[string]*TagValue   `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // New tag values (replaces existing tags)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTaskTagsRequest) Reset() {
	*x = UpdateTaskTagsRequest{}
	mi := &file_task_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskTagsRequest) ProtoMessage() {}

func (x *UpdateTaskTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskTagsRequest.ProtoReflect.Descriptor instead.
func (*UpdateTaskTagsRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateTaskTagsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTaskTagsRequest) GetTags() map[string]*TagValue {
	if x != nil {
		return x.Tags
	}
	return nil
}

// UpdateTaskTagsResponse returns the task with updated tags.
type UpdateTaskTagsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"` // Task with new tag values
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTaskTagsResponse) Reset() {
	*x = UpdateTaskTagsResponse{}
	mi := &file_task_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskTagsResponse) ProtoMessage() {}

func (x *UpdateTaskTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskTagsResponse.ProtoReflect.Descriptor instead.
func (*UpdateTaskTagsResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateTaskTagsResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type SyncCalendarRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncCalendarRequest) Reset() {
	*x = SyncCalendarRequest{}
	mi := &file_task_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncCalendarRequest) ProtoMessage() {}

func (x *SyncCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncCalendarRequest.ProtoReflect.Descriptor instead.
func (*SyncCalendarRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{14}
}

func (x *SyncCalendarRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type SyncCalendarResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TasksSynced   int32                  `protobuf:"varint,1,opt,name=tasks_synced,json=tasksSynced,proto3" json:"tasks_synced,omitempty"`
	Errors        []string               `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncCalendarResponse) Reset() {
	*x = SyncCalendarResponse{}
	mi := &file_task_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncCalendarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncCalendarResponse) ProtoMessage() {}

func (x *SyncCalendarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncCalendarResponse.ProtoReflect.Descriptor instead.
func (*SyncCalendarResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{15}
}

func (x *SyncCalendarResponse) GetTasksSynced() int32 {
	if x != nil {
		return x.TasksSynced
	}
	return 0
}

func (x *SyncCalendarResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetUserRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Identifier:
	//
	//	*GetUserRequest_UserId
	//	*GetUserRequest_Email
	//	*GetUserRequest_Unknown
	Identifier    isGetUserRequest_Identifier `protobuf_oneof:"identifier"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	mi := &file_task_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{16}
}

func (x *GetUserRequest) GetIdentifier() isGetUserRequest_Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *GetUserRequest) GetUserId() string {
	if x != nil {
		if x, ok := x.Identifier.(*GetUserRequest_UserId); ok {
			return x.UserId
		}
	}
	return ""
}

func (x *GetUserRequest) GetEmail() string {
	if x != nil {
		if x, ok := x.Identifier.(*GetUserRequest_Email); ok {
			return x.Email
		}
	}
	return ""
}

func (x *GetUserRequest) GetUnknown() string {
	if x != nil {
		if x, ok := x.Identifier.(*GetUserRequest_Unknown); ok {
			return x.Unknown
		}
	}
	return ""
}

type isGetUserRequest_Identifier interface {
	isGetUserRequest_Identifier()
}

type GetUserRequest_UserId struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3,oneof"`
}

type GetUserRequest_Email struct {
	Email string `protobuf:"bytes,2,opt,name=email,proto3,oneof"`
}

type GetUserRequest_Unknown struct {
	Unknown string `protobuf:"bytes,3,opt,name=unknown,proto3,oneof"` // For resolving user by name or other identifier (uses dynamic resolver instead of direct match/lookup)
}

func (*GetUserRequest_UserId) isGetUserRequest_Identifier() {}

func (*GetUserRequest_Email) isGetUserRequest_Identifier() {}

func (*GetUserRequest_Unknown) isGetUserRequest_Identifier() {}

type GetUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserResponse) Reset() {
	*x = GetUserResponse{}
	mi := &file_task_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResponse) ProtoMessage() {}

func (x *GetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{17}
}

func (x *GetUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// CreateUserRequest creates a new user in the system.
type CreateUserRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Email                string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`                                                           // Required: User's email address (must be unique)
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                             // Required: User's display name
	NotificationSettings []*NotificationSetting `protobuf:"bytes,3,rep,name=notification_settings,json=notificationSettings,proto3" json:"notification_settings,omitempty"` // Optional: Initial notification preferences
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	mi := &file_task_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{18}
}

func (x *CreateUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateUserRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateUserRequest) GetNotificationSettings() []*NotificationSetting {
	if x != nil {
		return x.NotificationSettings
	}
	return nil
}

// CreateUserResponse returns the newly created user.
type CreateUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"` // The created user with generated ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserResponse) Reset() {
	*x = CreateUserResponse{}
	mi := &file_task_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserResponse) ProtoMessage() {}

func (x *CreateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserResponse.ProtoReflect.Descriptor instead.
func (*CreateUserResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{19}
}

func (x *CreateUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type UpdateUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserRequest) Reset() {
	*x = UpdateUserRequest{}
	mi := &file_task_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRequest) ProtoMessage() {}

func (x *UpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateUserRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type UpdateUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserResponse) Reset() {
	*x = UpdateUserResponse{}
	mi := &file_task_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserResponse) ProtoMessage() {}

func (x *UpdateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// MoveToStagingRequest moves a task from PENDING/INBOX to STAGING.
// Can specify destination task (for dependencies) or explicit location.
type MoveToStagingRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	SourceId string                 `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"` // Required: ID of task to move to staging
	// Types that are valid to be assigned to Destination:
	//
	//	*MoveToStagingRequest_DestinationId
	//	*MoveToStagingRequest_NewLocation
	Destination   isMoveToStagingRequest_Destination `protobuf_oneof:"destination"`
	Points        []*Point                           `protobuf:"bytes,4,rep,name=points,proto3" json:"points,omitempty"`                                                                       // Optional: Work points to assign to task
	Tags          map[string]*TagValue               `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Optional: tags to add during staging
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveToStagingRequest) Reset() {
	*x = MoveToStagingRequest{}
	mi := &file_task_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveToStagingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveToStagingRequest) ProtoMessage() {}

func (x *MoveToStagingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveToStagingRequest.ProtoReflect.Descriptor instead.
func (*MoveToStagingRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{22}
}

func (x *MoveToStagingRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *MoveToStagingRequest) GetDestination() isMoveToStagingRequest_Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *MoveToStagingRequest) GetDestinationId() string {
	if x != nil {
		if x, ok := x.Destination.(*MoveToStagingRequest_DestinationId); ok {
			return x.DestinationId
		}
	}
	return ""
}

func (x *MoveToStagingRequest) GetNewLocation() *MoveToStagingRequest_NewLocationList {
	if x != nil {
		if x, ok := x.Destination.(*MoveToStagingRequest_NewLocation); ok {
			return x.NewLocation
		}
	}
	return nil
}

func (x *MoveToStagingRequest) GetPoints() []*Point {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *MoveToStagingRequest) GetTags() map[string]*TagValue {
	if x != nil {
		return x.Tags
	}
	return nil
}

type isMoveToStagingRequest_Destination interface {
	isMoveToStagingRequest_Destination()
}

type MoveToStagingRequest_DestinationId struct {
	DestinationId string `protobuf:"bytes,2,opt,name=destination_id,json=destinationId,proto3,oneof"` // Option 1: Inherit location from existing staging task
}

type MoveToStagingRequest_NewLocation struct {
	NewLocation *MoveToStagingRequest_NewLocationList `protobuf:"bytes,3,opt,name=new_location,json=newLocation,proto3,oneof"` // Option 2: Specify explicit location path
}

func (*MoveToStagingRequest_DestinationId) isMoveToStagingRequest_Destination() {}

func (*MoveToStagingRequest_NewLocation) isMoveToStagingRequest_Destination() {}

// MoveToStagingResponse returns the updated task in STAGING stage.
type MoveToStagingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"` // Task updated with new stage, location, dependencies
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveToStagingResponse) Reset() {
	*x = MoveToStagingResponse{}
	mi := &file_task_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveToStagingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveToStagingResponse) ProtoMessage() {}

func (x *MoveToStagingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveToStagingResponse.ProtoReflect.Descriptor instead.
func (*MoveToStagingResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{23}
}

func (x *MoveToStagingResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

// StartTaskRequest begins active work on a task in STAGING.
// Creates initial work interval and moves task to ACTIVE stage.
type StartTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Required: ID of task to start
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartTaskRequest) Reset() {
	*x = StartTaskRequest{}
	mi := &file_task_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTaskRequest) ProtoMessage() {}

func (x *StartTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTaskRequest.ProtoReflect.Descriptor instead.
func (*StartTaskRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{24}
}

func (x *StartTaskRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// StartTaskResponse returns the task now in ACTIVE stage.
type StartTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"` // Task with ACTIVE stage and new work interval
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartTaskResponse) Reset() {
	*x = StartTaskResponse{}
	mi := &file_task_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTaskResponse) ProtoMessage() {}

func (x *StartTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTaskResponse.ProtoReflect.Descriptor instead.
func (*StartTaskResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{25}
}

func (x *StartTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

// StopTaskRequest pauses or completes work on an ACTIVE task.
// Records completed points and determines if task is fully complete.
type StopTaskRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                  // Required: ID of active task to stop
	PointsCompleted []*Point               `protobuf:"bytes,2,rep,name=points_completed,json=pointsCompleted,proto3" json:"points_completed,omitempty"` // Points completed during this work session
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StopTaskRequest) Reset() {
	*x = StopTaskRequest{}
	mi := &file_task_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopTaskRequest) ProtoMessage() {}

func (x *StopTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopTaskRequest.ProtoReflect.Descriptor instead.
func (*StopTaskRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{26}
}

func (x *StopTaskRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StopTaskRequest) GetPointsCompleted() []*Point {
	if x != nil {
		return x.PointsCompleted
	}
	return nil
}

// StopTaskResponse indicates whether task was completed or paused.
type StopTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`            // Updated task (STAGING if paused, ARCHIVED if complete)
	Completed     bool                   `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"` // True if all points completed and task archived
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopTaskResponse) Reset() {
	*x = StopTaskResponse{}
	mi := &file_task_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopTaskResponse) ProtoMessage() {}

func (x *StopTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopTaskResponse.ProtoReflect.Descriptor instead.
func (*StopTaskResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{27}
}

func (x *StopTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *StopTaskResponse) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

// CompleteTaskRequest marks an ACTIVE task as fully completed.
// Bypasses point tracking and immediately archives the task.
type CompleteTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Required: ID of task to complete
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteTaskRequest) Reset() {
	*x = CompleteTaskRequest{}
	mi := &file_task_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteTaskRequest) ProtoMessage() {}

func (x *CompleteTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteTaskRequest.ProtoReflect.Descriptor instead.
func (*CompleteTaskRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{28}
}

func (x *CompleteTaskRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// CompleteTaskResponse returns the completed and archived task.
type CompleteTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"` // Task with COMPLETED status and ARCHIVED stage
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteTaskResponse) Reset() {
	*x = CompleteTaskResponse{}
	mi := &file_task_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteTaskResponse) ProtoMessage() {}

func (x *CompleteTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteTaskResponse.ProtoReflect.Descriptor instead.
func (*CompleteTaskResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{29}
}

func (x *CompleteTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

// MergeTasksRequest combines two tasks into one.
// Merges points, dependencies, and metadata from source into target.
type MergeTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FromId        string                 `protobuf:"bytes,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"` // Required: Task to merge (will be deleted)
	ToId          string                 `protobuf:"bytes,2,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`       // Required: Task to receive merged content
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeTasksRequest) Reset() {
	*x = MergeTasksRequest{}
	mi := &file_task_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeTasksRequest) ProtoMessage() {}

func (x *MergeTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeTasksRequest.ProtoReflect.Descriptor instead.
func (*MergeTasksRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{30}
}

func (x *MergeTasksRequest) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *MergeTasksRequest) GetToId() string {
	if x != nil {
		return x.ToId
	}
	return ""
}

// MergeTasksResponse returns the merged task.
type MergeTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MergedTask    *Task                  `protobuf:"bytes,1,opt,name=merged_task,json=mergedTask,proto3" json:"merged_task,omitempty"` // Combined task with merged points and dependencies
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeTasksResponse) Reset() {
	*x = MergeTasksResponse{}
	mi := &file_task_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeTasksResponse) ProtoMessage() {}

func (x *MergeTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeTasksResponse.ProtoReflect.Descriptor instead.
func (*MergeTasksResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{31}
}

func (x *MergeTasksResponse) GetMergedTask() *Task {
	if x != nil {
		return x.MergedTask
	}
	return nil
}

// SplitTaskRequest breaks one task into multiple smaller tasks.
// Original task is deleted and replaced with new tasks in same location.
type SplitTaskRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                  // Required: Task to split (will be deleted)
	NewNames        []string               `protobuf:"bytes,2,rep,name=new_names,json=newNames,proto3" json:"new_names,omitempty"`                      // Required: Names for new tasks
	NewDescriptions []string               `protobuf:"bytes,3,rep,name=new_descriptions,json=newDescriptions,proto3" json:"new_descriptions,omitempty"` // Optional: Descriptions for new tasks (must match names length)
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SplitTaskRequest) Reset() {
	*x = SplitTaskRequest{}
	mi := &file_task_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitTaskRequest) ProtoMessage() {}

func (x *SplitTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitTaskRequest.ProtoReflect.Descriptor instead.
func (*SplitTaskRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{32}
}

func (x *SplitTaskRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SplitTaskRequest) GetNewNames() []string {
	if x != nil {
		return x.NewNames
	}
	return nil
}

func (x *SplitTaskRequest) GetNewDescriptions() []string {
	if x != nil {
		return x.NewDescriptions
	}
	return nil
}

// SplitTaskResponse returns all newly created tasks.
type SplitTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NewTasks      []*Task                `protobuf:"bytes,1,rep,name=new_tasks,json=newTasks,proto3" json:"new_tasks,omitempty"` // List of tasks created from split
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SplitTaskResponse) Reset() {
	*x = SplitTaskResponse{}
	mi := &file_task_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitTaskResponse) ProtoMessage() {}

func (x *SplitTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitTaskResponse.ProtoReflect.Descriptor instead.
func (*SplitTaskResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{33}
}

func (x *SplitTaskResponse) GetNewTasks() []*Task {
	if x != nil {
		return x.NewTasks
	}
	return nil
}

// AdvertiseTaskRequest creates dependencies from one task to multiple others.
// Sets up the source task as a prerequisite for all target tasks.
type AdvertiseTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                // Required: Source task (dependency)
	TargetIds     []string               `protobuf:"bytes,2,rep,name=target_ids,json=targetIds,proto3" json:"target_ids,omitempty"` // Required: Tasks that will depend on source
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdvertiseTaskRequest) Reset() {
	*x = AdvertiseTaskRequest{}
	mi := &file_task_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdvertiseTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvertiseTaskRequest) ProtoMessage() {}

func (x *AdvertiseTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvertiseTaskRequest.ProtoReflect.Descriptor instead.
func (*AdvertiseTaskRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{34}
}

func (x *AdvertiseTaskRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdvertiseTaskRequest) GetTargetIds() []string {
	if x != nil {
		return x.TargetIds
	}
	return nil
}

// AdvertiseTaskResponse returns the source task with updated outflows.
type AdvertiseTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"` // Source task with new outflow dependencies
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdvertiseTaskResponse) Reset() {
	*x = AdvertiseTaskResponse{}
	mi := &file_task_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdvertiseTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvertiseTaskResponse) ProtoMessage() {}

func (x *AdvertiseTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvertiseTaskResponse.ProtoReflect.Descriptor instead.
func (*AdvertiseTaskResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{35}
}

func (x *AdvertiseTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

// StitchTasksRequest creates dependencies from multiple source tasks to one target.
// All source tasks become prerequisites for the target task.
type StitchTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SourceIds     []string               `protobuf:"bytes,1,rep,name=source_ids,json=sourceIds,proto3" json:"source_ids,omitempty"` // Required: Tasks that target depends on
	TargetId      string                 `protobuf:"bytes,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`    // Required: Task that depends on all sources
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StitchTasksRequest) Reset() {
	*x = StitchTasksRequest{}
	mi := &file_task_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StitchTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StitchTasksRequest) ProtoMessage() {}

func (x *StitchTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StitchTasksRequest.ProtoReflect.Descriptor instead.
func (*StitchTasksRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{36}
}

func (x *StitchTasksRequest) GetSourceIds() []string {
	if x != nil {
		return x.SourceIds
	}
	return nil
}

func (x *StitchTasksRequest) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

// StitchTasksResponse returns all updated tasks with new dependencies.
type StitchTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UpdatedTasks  []*Task                `protobuf:"bytes,1,rep,name=updated_tasks,json=updatedTasks,proto3" json:"updated_tasks,omitempty"` // All tasks (sources + target) with updated dependencies
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StitchTasksResponse) Reset() {
	*x = StitchTasksResponse{}
	mi := &file_task_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StitchTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StitchTasksResponse) ProtoMessage() {}

func (x *StitchTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StitchTasksResponse.ProtoReflect.Descriptor instead.
func (*StitchTasksResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{37}
}

func (x *StitchTasksResponse) GetUpdatedTasks() []*Task {
	if x != nil {
		return x.UpdatedTasks
	}
	return nil
}

// ListTasksRequest retrieves tasks filtered by stage.
// Used for displaying tasks in different workflow stages.
type ListTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stage         TaskStage              `protobuf:"varint,1,opt,name=stage,proto3,enum=taskcore.v1.TaskStage" json:"stage,omitempty"` // Required: Stage to filter by
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             // Optional: Filter by user (defaults to current user)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksRequest) Reset() {
	*x = ListTasksRequest{}
	mi := &file_task_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksRequest) ProtoMessage() {}

func (x *ListTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksRequest.ProtoReflect.Descriptor instead.
func (*ListTasksRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{38}
}

func (x *ListTasksRequest) GetStage() TaskStage {
	if x != nil {
		return x.Stage
	}
	return TaskStage_STAGE_UNSPECIFIED
}

func (x *ListTasksRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// ListTasksResponse returns filtered list of tasks.
type ListTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tasks         []*Task                `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"` // Tasks matching the filter criteria
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksResponse) Reset() {
	*x = ListTasksResponse{}
	mi := &file_task_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksResponse) ProtoMessage() {}

func (x *ListTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksResponse.ProtoReflect.Descriptor instead.
func (*ListTasksResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{39}
}

func (x *ListTasksResponse) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// GetTaskRequest retrieves a single task by ID.
type GetTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Required: Unique task identifier
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	mi := &file_task_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{40}
}

func (x *GetTaskRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// GetTaskResponse returns the requested task.
type GetTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"` // The requested task (error if not found)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskResponse) Reset() {
	*x = GetTaskResponse{}
	mi := &file_task_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskResponse) ProtoMessage() {}

func (x *GetTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskResponse.ProtoReflect.Descriptor instead.
func (*GetTaskResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{41}
}

func (x *GetTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

// GetTaskDAGRequest retrieves tasks in dependency order for DAG visualization.
// Returns tasks sorted topologically to enable ASCII graph rendering.
type GetTaskDAGRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // Optional: Filter by user (defaults to current user)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskDAGRequest) Reset() {
	*x = GetTaskDAGRequest{}
	mi := &file_task_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskDAGRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskDAGRequest) ProtoMessage() {}

func (x *GetTaskDAGRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskDAGRequest.ProtoReflect.Descriptor instead.
func (*GetTaskDAGRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{42}
}

func (x *GetTaskDAGRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// GetTaskDAGResponse returns tasks in topological order for DAG rendering.
type GetTaskDAGResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Tasks           []*Task                `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`                                                                                                                      // Tasks sorted in dependency order
	MinimumPrefixes map[string]string      `protobuf:"bytes,2,rep,name=minimum_prefixes,json=minimumPrefixes,proto3" json:"minimum_prefixes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Map of task ID to minimum unique prefix
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetTaskDAGResponse) Reset() {
	*x = GetTaskDAGResponse{}
	mi := &file_task_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskDAGResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskDAGResponse) ProtoMessage() {}

func (x *GetTaskDAGResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskDAGResponse.ProtoReflect.Descriptor instead.
func (*GetTaskDAGResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{43}
}

func (x *GetTaskDAGResponse) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *GetTaskDAGResponse) GetMinimumPrefixes() map[string]string {
	if x != nil {
		return x.MinimumPrefixes
	}
	return nil
}

// ID Resolution requests for server-side resolution
type ResolveTaskIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskInput     string                 `protobuf:"bytes,1,opt,name=task_input,json=taskInput,proto3" json:"task_input,omitempty"` // Task ID or partial prefix to resolve
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // Optional: User context for task lookup
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveTaskIDRequest) Reset() {
	*x = ResolveTaskIDRequest{}
	mi := &file_task_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveTaskIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveTaskIDRequest) ProtoMessage() {}

func (x *ResolveTaskIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveTaskIDRequest.ProtoReflect.Descriptor instead.
func (*ResolveTaskIDRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{44}
}

func (x *ResolveTaskIDRequest) GetTaskInput() string {
	if x != nil {
		return x.TaskInput
	}
	return ""
}

func (x *ResolveTaskIDRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ResolveTaskIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ResolvedId    string                 `protobuf:"bytes,1,opt,name=resolved_id,json=resolvedId,proto3" json:"resolved_id,omitempty"`          // Full task ID
	MinimumPrefix string                 `protobuf:"bytes,2,opt,name=minimum_prefix,json=minimumPrefix,proto3" json:"minimum_prefix,omitempty"` // Shortest unique prefix
	Suggestions   []string               `protobuf:"bytes,3,rep,name=suggestions,proto3" json:"suggestions,omitempty"`                          // Similar IDs if resolution failed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveTaskIDResponse) Reset() {
	*x = ResolveTaskIDResponse{}
	mi := &file_task_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveTaskIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveTaskIDResponse) ProtoMessage() {}

func (x *ResolveTaskIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveTaskIDResponse.ProtoReflect.Descriptor instead.
func (*ResolveTaskIDResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{45}
}

func (x *ResolveTaskIDResponse) GetResolvedId() string {
	if x != nil {
		return x.ResolvedId
	}
	return ""
}

func (x *ResolveTaskIDResponse) GetMinimumPrefix() string {
	if x != nil {
		return x.MinimumPrefix
	}
	return ""
}

func (x *ResolveTaskIDResponse) GetSuggestions() []string {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

type ResolveUserIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserInput     string                 `protobuf:"bytes,1,opt,name=user_input,json=userInput,proto3" json:"user_input,omitempty"` // User ID or name to resolve
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveUserIDRequest) Reset() {
	*x = ResolveUserIDRequest{}
	mi := &file_task_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveUserIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveUserIDRequest) ProtoMessage() {}

func (x *ResolveUserIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveUserIDRequest.ProtoReflect.Descriptor instead.
func (*ResolveUserIDRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{46}
}

func (x *ResolveUserIDRequest) GetUserInput() string {
	if x != nil {
		return x.UserInput
	}
	return ""
}

type ResolveUserIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ResolvedId    string                 `protobuf:"bytes,1,opt,name=resolved_id,json=resolvedId,proto3" json:"resolved_id,omitempty"`       // Full user ID
	ResolvedName  string                 `protobuf:"bytes,2,opt,name=resolved_name,json=resolvedName,proto3" json:"resolved_name,omitempty"` // Full user name
	Suggestions   []string               `protobuf:"bytes,3,rep,name=suggestions,proto3" json:"suggestions,omitempty"`                       // Similar names if resolution failed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveUserIDResponse) Reset() {
	*x = ResolveUserIDResponse{}
	mi := &file_task_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveUserIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveUserIDResponse) ProtoMessage() {}

func (x *ResolveUserIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveUserIDResponse.ProtoReflect.Descriptor instead.
func (*ResolveUserIDResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{47}
}

func (x *ResolveUserIDResponse) GetResolvedId() string {
	if x != nil {
		return x.ResolvedId
	}
	return ""
}

func (x *ResolveUserIDResponse) GetResolvedName() string {
	if x != nil {
		return x.ResolvedName
	}
	return ""
}

func (x *ResolveUserIDResponse) GetSuggestions() []string {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

// NewLocationList wraps the location array for oneof usage
type MoveToStagingRequest_NewLocationList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NewLocation   []string               `protobuf:"bytes,1,rep,name=new_location,json=newLocation,proto3" json:"new_location,omitempty"` // Hierarchical path (e.g., ["project", "backend"])
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveToStagingRequest_NewLocationList) Reset() {
	*x = MoveToStagingRequest_NewLocationList{}
	mi := &file_task_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveToStagingRequest_NewLocationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveToStagingRequest_NewLocationList) ProtoMessage() {}

func (x *MoveToStagingRequest_NewLocationList) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveToStagingRequest_NewLocationList.ProtoReflect.Descriptor instead.
func (*MoveToStagingRequest_NewLocationList) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{22, 1}
}

func (x *MoveToStagingRequest_NewLocationList) GetNewLocation() []string {
	if x != nil {
		return x.NewLocation
	}
	return nil
}

var File_task_proto protoreflect.FileDescriptor

const file_task_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"task.proto\x12\vtaskcore.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xcb\x01\n" +
	"\x04User\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05email\x18\x02 \x01(\tR\x05email\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x122\n" +
	"\x15google_calendar_token\x18\x04 \x01(\tR\x13googleCalendarToken\x12U\n" +
	"\x15notification_settings\x18\x05 \x03(\v2 .taskcore.v1.NotificationSettingR\x14notificationSettings\"\x83\x01\n" +
	"\x13NotificationSetting\x121\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1d.taskcore.v1.NotificationTypeR\x04type\x12\x18\n" +
	"\aenabled\x18\x02 \x01(\bR\aenabled\x12\x1f\n" +
	"\vdays_before\x18\x03 \x01(\x05R\n" +
	"daysBefore\"h\n" +
	"\x12GeographicLocation\x12\x1a\n" +
	"\blatitude\x18\x01 \x01(\x01R\blatitude\x12\x1c\n" +
	"\tlongitude\x18\x02 \x01(\x01R\tlongitude\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\"\xe5\x01\n" +
	"\bTagValue\x12(\n" +
	"\x04type\x18\x01 \x01(\x0e2\x14.taskcore.v1.TagTypeR\x04type\x12\x1f\n" +
	"\n" +
	"text_value\x18\x02 \x01(\tH\x00R\ttextValue\x12H\n" +
	"\x0elocation_value\x18\x03 \x01(\v2\x1f.taskcore.v1.GeographicLocationH\x00R\rlocationValue\x12;\n" +
	"\n" +
	"time_value\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampH\x00R\ttimeValueB\a\n" +
	"\x05value\"3\n" +
	"\x05Point\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value\"\xaf\x01\n" +
	"\fWorkInterval\x120\n" +
	"\x05start\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x05start\x12.\n" +
	"\x04stop\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x04stop\x12=\n" +
	"\x10points_completed\x18\x03 \x03(\v2\x12.taskcore.v1.PointR\x0fpointsCompleted\"z\n" +
	"\bSchedule\x12@\n" +
	"\x0ework_intervals\x18\x01 \x03(\v2\x19.taskcore.v1.WorkIntervalR\rworkIntervals\x12,\n" +
	"\x03due\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x03due\"V\n" +
	"\fStatusUpdate\x12.\n" +
	"\x04time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12\x16\n" +
	"\x06update\x18\x02 \x01(\tR\x06update\"=\n" +
	"\x06Status\x123\n" +
	"\aupdates\x18\x01 \x03(\v2\x19.taskcore.v1.StatusUpdateR\aupdates\"\xe1\x05\n" +
	"\x04Task\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12,\n" +
	"\x05stage\x18\x04 \x01(\x0e2\x16.taskcore.v1.TaskStageR\x05stage\x12/\n" +
	"\x06status\x18\x05 \x01(\x0e2\x17.taskcore.v1.TaskStatusR\x06status\x12\x1a\n" +
	"\blocation\x18\x06 \x03(\tR\blocation\x12*\n" +
	"\x06points\x18\a \x03(\v2\x12.taskcore.v1.PointR\x06points\x121\n" +
	"\bschedule\x18\b \x01(\v2\x15.taskcore.v1.ScheduleR\bschedule\x12:\n" +
	"\x0estatus_history\x18\t \x01(\v2\x13.taskcore.v1.StatusR\rstatusHistory\x12/\n" +
	"\x04tags\x18\n" +
	" \x03(\v2\x1b.taskcore.v1.Task.TagsEntryR\x04tags\x12\x18\n" +
	"\ainflows\x18\v \x03(\tR\ainflows\x12\x1a\n" +
	"\boutflows\x18\f \x03(\tR\boutflows\x12\x17\n" +
	"\auser_id\x18\r \x01(\tR\x06userId\x127\n" +
	"\x18google_calendar_event_id\x18\x0e \x01(\tR\x15googleCalendarEventId\x129\n" +
	"\n" +
	"created_at\x18\x0f \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\x10 \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x1aN\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12+\n" +
	"\x05value\x18\x02 \x01(\v2\x15.taskcore.v1.TagValueR\x05value:\x028\x01\"_\n" +
	"\x0eAddTaskRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\"8\n" +
	"\x0fAddTaskResponse\x12%\n" +
	"\x04task\x18\x01 \x01(\v2\x11.taskcore.v1.TaskR\x04task\"\xb9\x01\n" +
	"\x15UpdateTaskTagsRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12@\n" +
	"\x04tags\x18\x02 \x03(\v2,.taskcore.v1.UpdateTaskTagsRequest.TagsEntryR\x04tags\x1aN\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12+\n" +
	"\x05value\x18\x02 \x01(\v2\x15.taskcore.v1.TagValueR\x05value:\x028\x01\"?\n" +
	"\x16UpdateTaskTagsResponse\x12%\n" +
	"\x04task\x18\x01 \x01(\v2\x11.taskcore.v1.TaskR\x04task\".\n" +
	"\x13SyncCalendarRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\"Q\n" +
	"\x14SyncCalendarResponse\x12!\n" +
	"\ftasks_synced\x18\x01 \x01(\x05R\vtasksSynced\x12\x16\n" +
	"\x06errors\x18\x02 \x03(\tR\x06errors\"m\n" +
	"\x0eGetUserRequest\x12\x19\n" +
	"\auser_id\x18\x01 \x01(\tH\x00R\x06userId\x12\x16\n" +
	"\x05email\x18\x02 \x01(\tH\x00R\x05email\x12\x1a\n" +
	"\aunknown\x18\x03 \x01(\tH\x00R\aunknownB\f\n" +
	"\n" +
	"identifier\"8\n" +
	"\x0fGetUserResponse\x12%\n" +
	"\x04user\x18\x01 \x01(\v2\x11.taskcore.v1.UserR\x04user\"\x94\x01\n" +
	"\x11CreateUserRequest\x12\x14\n" +
	"\x05email\x18\x01 \x01(\tR\x05email\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12U\n" +
	"\x15notification_settings\x18\x03 \x03(\v2 .taskcore.v1.NotificationSettingR\x14notificationSettings\";\n" +
	"\x12CreateUserResponse\x12%\n" +
	"\x04user\x18\x01 \x01(\v2\x11.taskcore.v1.UserR\x04user\":\n" +
	"\x11UpdateUserRequest\x12%\n" +
	"\x04user\x18\x01 \x01(\v2\x11.taskcore.v1.UserR\x04user\";\n" +
	"\x12UpdateUserResponse\x12%\n" +
	"\x04user\x18\x01 \x01(\v2\x11.taskcore.v1.UserR\x04user\"\xb6\x03\n" +
	"\x14MoveToStagingRequest\x12\x1b\n" +
	"\tsource_id\x18\x01 \x01(\tR\bsourceId\x12'\n" +
	"\x0edestination_id\x18\x02 \x01(\tH\x00R\rdestinationId\x12V\n" +
	"\fnew_location\x18\x03 \x01(\v21.taskcore.v1.MoveToStagingRequest.NewLocationListH\x00R\vnewLocation\x12*\n" +
	"\x06points\x18\x04 \x03(\v2\x12.taskcore.v1.PointR\x06points\x12?\n" +
	"\x04tags\x18\x05 \x03(\v2+.taskcore.v1.MoveToStagingRequest.TagsEntryR\x04tags\x1aN\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12+\n" +
	"\x05value\x18\x02 \x01(\v2\x15.taskcore.v1.TagValueR\x05value:\x028\x01\x1a4\n" +
	"\x0fNewLocationList\x12!\n" +
	"\fnew_location\x18\x01 \x03(\tR\vnewLocationB\r\n" +
	"\vdestination\">\n" +
	"\x15MoveToStagingResponse\x12%\n" +
	"\x04task\x18\x01 \x01(\v2\x11.taskcore.v1.TaskR\x04task\"\"\n" +
	"\x10StartTaskRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\":\n" +
	"\x11StartTaskResponse\x12%\n" +
	"\x04task\x18\x01 \x01(\v2\x11.taskcore.v1.TaskR\x04task\"`\n" +
	"\x0fStopTaskRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12=\n" +
	"\x10points_completed\x18\x02 \x03(\v2\x12.taskcore.v1.PointR\x0fpointsCompleted\"W\n" +
	"\x10StopTaskResponse\x12%\n" +
	"\x04task\x18\x01 \x01(\v2\x11.taskcore.v1.TaskR\x04task\x12\x1c\n" +
	"\tcompleted\x18\x02 \x01(\bR\tcompleted\"%\n" +
	"\x13CompleteTaskRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"=\n" +
	"\x14CompleteTaskResponse\x12%\n" +
	"\x04task\x18\x01 \x01(\v2\x11.taskcore.v1.TaskR\x04task\"A\n" +
	"\x11MergeTasksRequest\x12\x17\n" +
	"\afrom_id\x18\x01 \x01(\tR\x06fromId\x12\x13\n" +
	"\x05to_id\x18\x02 \x01(\tR\x04toId\"H\n" +
	"\x12MergeTasksResponse\x122\n" +
	"\vmerged_task\x18\x01 \x01(\v2\x11.taskcore.v1.TaskR\n" +
	"mergedTask\"j\n" +
	"\x10SplitTaskRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tnew_names\x18\x02 \x03(\tR\bnewNames\x12)\n" +
	"\x10new_descriptions\x18\x03 \x03(\tR\x0fnewDescriptions\"C\n" +
	"\x11SplitTaskResponse\x12.\n" +
	"\tnew_tasks\x18\x01 \x03(\v2\x11.taskcore.v1.TaskR\bnewTasks\"E\n" +
	"\x14AdvertiseTaskRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"target_ids\x18\x02 \x03(\tR\ttargetIds\">\n" +
	"\x15AdvertiseTaskResponse\x12%\n" +
	"\x04task\x18\x01 \x01(\v2\x11.taskcore.v1.TaskR\x04task\"P\n" +
	"\x12StitchTasksRequest\x12\x1d\n" +
	"\n" +
	"source_ids\x18\x01 \x03(\tR\tsourceIds\x12\x1b\n" +
	"\ttarget_id\x18\x02 \x01(\tR\btargetId\"M\n" +
	"\x13StitchTasksResponse\x126\n" +
	"\rupdated_tasks\x18\x01 \x03(\v2\x11.taskcore.v1.TaskR\fupdatedTasks\"Y\n" +
	"\x10ListTasksRequest\x12,\n" +
	"\x05stage\x18\x01 \x01(\x0e2\x16.taskcore.v1.TaskStageR\x05stage\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"<\n" +
	"\x11ListTasksResponse\x12'\n" +
	"\x05tasks\x18\x01 \x03(\v2\x11.taskcore.v1.TaskR\x05tasks\" \n" +
	"\x0eGetTaskRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"8\n" +
	"\x0fGetTaskResponse\x12%\n" +
	"\x04task\x18\x01 \x01(\v2\x11.taskcore.v1.TaskR\x04task\",\n" +
	"\x11GetTaskDAGRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\"\xe2\x01\n" +
	"\x12GetTaskDAGResponse\x12'\n" +
	"\x05tasks\x18\x01 \x03(\v2\x11.taskcore.v1.TaskR\x05tasks\x12_\n" +
	"\x10minimum_prefixes\x18\x02 \x03(\v24.taskcore.v1.GetTaskDAGResponse.MinimumPrefixesEntryR\x0fminimumPrefixes\x1aB\n" +
	"\x14MinimumPrefixesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"N\n" +
	"\x14ResolveTaskIDRequest\x12\x1d\n" +
	"\n" +
	"task_input\x18\x01 \x01(\tR\ttaskInput\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"\x81\x01\n" +
	"\x15ResolveTaskIDResponse\x12\x1f\n" +
	"\vresolved_id\x18\x01 \x01(\tR\n" +
	"resolvedId\x12%\n" +
	"\x0eminimum_prefix\x18\x02 \x01(\tR\rminimumPrefix\x12 \n" +
	"\vsuggestions\x18\x03 \x03(\tR\vsuggestions\"5\n" +
	"\x14ResolveUserIDRequest\x12\x1d\n" +
	"\n" +
	"user_input\x18\x01 \x01(\tR\tuserInput\"\x7f\n" +
	"\x15ResolveUserIDResponse\x12\x1f\n" +
	"\vresolved_id\x18\x01 \x01(\tR\n" +
	"resolvedId\x12#\n" +
	"\rresolved_name\x18\x02 \x01(\tR\fresolvedName\x12 \n" +
	"\vsuggestions\x18\x03 \x03(\tR\vsuggestions*\x7f\n" +
	"\tTaskStage\x12\x15\n" +
	"\x11STAGE_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rSTAGE_PENDING\x10\x01\x12\x0f\n" +
	"\vSTAGE_INBOX\x10\x02\x12\x11\n" +
	"\rSTAGE_STAGING\x10\x03\x12\x10\n" +
	"\fSTAGE_ACTIVE\x10\x04\x12\x12\n" +
	"\x0eSTAGE_ARCHIVED\x10\x05*\xc3\x01\n" +
	"\n" +
	"TaskStatus\x12\x1b\n" +
	"\x17TASK_STATUS_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10TASK_STATUS_TODO\x10\x01\x12\x1b\n" +
	"\x17TASK_STATUS_IN_PROGRESS\x10\x02\x12\x16\n" +
	"\x12TASK_STATUS_PAUSED\x10\x03\x12\x17\n" +
	"\x13TASK_STATUS_BLOCKED\x10\x04\x12\x19\n" +
	"\x15TASK_STATUS_COMPLETED\x10\x05\x12\x19\n" +
	"\x15TASK_STATUS_CANCELLED\x10\x06*`\n" +
	"\aTagType\x12\x18\n" +
	"\x14TAG_TYPE_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rTAG_TYPE_TEXT\x10\x01\x12\x15\n" +
	"\x11TAG_TYPE_LOCATION\x10\x02\x12\x11\n" +
	"\rTAG_TYPE_TIME\x10\x03*\x90\x01\n" +
	"\x10NotificationType\x12!\n" +
	"\x1dNOTIFICATION_TYPE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16NOTIFICATION_ON_ASSIGN\x10\x01\x12\x19\n" +
	"\x15NOTIFICATION_ON_START\x10\x02\x12\"\n" +
	"\x1eNOTIFICATION_N_DAYS_BEFORE_DUE\x10\x032\xff\v\n" +
	"\vTaskService\x12D\n" +
	"\aAddTask\x12\x1b.taskcore.v1.AddTaskRequest\x1a\x1c.taskcore.v1.AddTaskResponse\x12V\n" +
	"\rMoveToStaging\x12!.taskcore.v1.MoveToStagingRequest\x1a\".taskcore.v1.MoveToStagingResponse\x12J\n" +
	"\tStartTask\x12\x1d.taskcore.v1.StartTaskRequest\x1a\x1e.taskcore.v1.StartTaskResponse\x12G\n" +
	"\bStopTask\x12\x1c.taskcore.v1.StopTaskRequest\x1a\x1d.taskcore.v1.StopTaskResponse\x12S\n" +
	"\fCompleteTask\x12 .taskcore.v1.CompleteTaskRequest\x1a!.taskcore.v1.CompleteTaskResponse\x12M\n" +
	"\n" +
	"MergeTasks\x12\x1e.taskcore.v1.MergeTasksRequest\x1a\x1f.taskcore.v1.MergeTasksResponse\x12J\n" +
	"\tSplitTask\x12\x1d.taskcore.v1.SplitTaskRequest\x1a\x1e.taskcore.v1.SplitTaskResponse\x12V\n" +
	"\rAdvertiseTask\x12!.taskcore.v1.AdvertiseTaskRequest\x1a\".taskcore.v1.AdvertiseTaskResponse\x12P\n" +
	"\vStitchTasks\x12\x1f.taskcore.v1.StitchTasksRequest\x1a .taskcore.v1.StitchTasksResponse\x12J\n" +
	"\tListTasks\x12\x1d.taskcore.v1.ListTasksRequest\x1a\x1e.taskcore.v1.ListTasksResponse\x12D\n" +
	"\aGetTask\x12\x1b.taskcore.v1.GetTaskRequest\x1a\x1c.taskcore.v1.GetTaskResponse\x12M\n" +
	"\n" +
	"GetTaskDAG\x12\x1e.taskcore.v1.GetTaskDAGRequest\x1a\x1f.taskcore.v1.GetTaskDAGResponse\x12Y\n" +
	"\x0eUpdateTaskTags\x12\".taskcore.v1.UpdateTaskTagsRequest\x1a#.taskcore.v1.UpdateTaskTagsResponse\x12S\n" +
	"\fSyncCalendar\x12 .taskcore.v1.SyncCalendarRequest\x1a!.taskcore.v1.SyncCalendarResponse\x12M\n" +
	"\n" +
	"CreateUser\x12\x1e.taskcore.v1.CreateUserRequest\x1a\x1f.taskcore.v1.CreateUserResponse\x12D\n" +
	"\aGetUser\x12\x1b.taskcore.v1.GetUserRequest\x1a\x1c.taskcore.v1.GetUserResponse\x12M\n" +
	"\n" +
	"UpdateUser\x12\x1e.taskcore.v1.UpdateUserRequest\x1a\x1f.taskcore.v1.UpdateUserResponse\x12V\n" +
	"\rResolveTaskID\x12!.taskcore.v1.ResolveTaskIDRequest\x1a\".taskcore.v1.ResolveTaskIDResponse\x12V\n" +
	"\rResolveUserID\x12!.taskcore.v1.ResolveUserIDRequest\x1a\".taskcore.v1.ResolveUserIDResponseB>Z<github.com/DaDevFox/task-systems/task-core/proto/taskcore/v1b\x06proto3"

var (
	file_task_proto_rawDescOnce sync.Once
	file_task_proto_rawDescData []byte
)

func file_task_proto_rawDescGZIP() []byte {
	file_task_proto_rawDescOnce.Do(func() {
		file_task_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_task_proto_rawDesc), len(file_task_proto_rawDesc)))
	})
	return file_task_proto_rawDescData
}

var file_task_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_task_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_task_proto_goTypes = []any{
	(TaskStage)(0),                               // 0: taskcore.v1.TaskStage
	(TaskStatus)(0),                              // 1: taskcore.v1.TaskStatus
	(TagType)(0),                                 // 2: taskcore.v1.TagType
	(NotificationType)(0),                        // 3: taskcore.v1.NotificationType
	(*User)(nil),                                 // 4: taskcore.v1.User
	(*NotificationSetting)(nil),                  // 5: taskcore.v1.NotificationSetting
	(*GeographicLocation)(nil),                   // 6: taskcore.v1.GeographicLocation
	(*TagValue)(nil),                             // 7: taskcore.v1.TagValue
	(*Point)(nil),                                // 8: taskcore.v1.Point
	(*WorkInterval)(nil),                         // 9: taskcore.v1.WorkInterval
	(*Schedule)(nil),                             // 10: taskcore.v1.Schedule
	(*StatusUpdate)(nil),                         // 11: taskcore.v1.StatusUpdate
	(*Status)(nil),                               // 12: taskcore.v1.Status
	(*Task)(nil),                                 // 13: taskcore.v1.Task
	(*AddTaskRequest)(nil),                       // 14: taskcore.v1.AddTaskRequest
	(*AddTaskResponse)(nil),                      // 15: taskcore.v1.AddTaskResponse
	(*UpdateTaskTagsRequest)(nil),                // 16: taskcore.v1.UpdateTaskTagsRequest
	(*UpdateTaskTagsResponse)(nil),               // 17: taskcore.v1.UpdateTaskTagsResponse
	(*SyncCalendarRequest)(nil),                  // 18: taskcore.v1.SyncCalendarRequest
	(*SyncCalendarResponse)(nil),                 // 19: taskcore.v1.SyncCalendarResponse
	(*GetUserRequest)(nil),                       // 20: taskcore.v1.GetUserRequest
	(*GetUserResponse)(nil),                      // 21: taskcore.v1.GetUserResponse
	(*CreateUserRequest)(nil),                    // 22: taskcore.v1.CreateUserRequest
	(*CreateUserResponse)(nil),                   // 23: taskcore.v1.CreateUserResponse
	(*UpdateUserRequest)(nil),                    // 24: taskcore.v1.UpdateUserRequest
	(*UpdateUserResponse)(nil),                   // 25: taskcore.v1.UpdateUserResponse
	(*MoveToStagingRequest)(nil),                 // 26: taskcore.v1.MoveToStagingRequest
	(*MoveToStagingResponse)(nil),                // 27: taskcore.v1.MoveToStagingResponse
	(*StartTaskRequest)(nil),                     // 28: taskcore.v1.StartTaskRequest
	(*StartTaskResponse)(nil),                    // 29: taskcore.v1.StartTaskResponse
	(*StopTaskRequest)(nil),                      // 30: taskcore.v1.StopTaskRequest
	(*StopTaskResponse)(nil),                     // 31: taskcore.v1.StopTaskResponse
	(*CompleteTaskRequest)(nil),                  // 32: taskcore.v1.CompleteTaskRequest
	(*CompleteTaskResponse)(nil),                 // 33: taskcore.v1.CompleteTaskResponse
	(*MergeTasksRequest)(nil),                    // 34: taskcore.v1.MergeTasksRequest
	(*MergeTasksResponse)(nil),                   // 35: taskcore.v1.MergeTasksResponse
	(*SplitTaskRequest)(nil),                     // 36: taskcore.v1.SplitTaskRequest
	(*SplitTaskResponse)(nil),                    // 37: taskcore.v1.SplitTaskResponse
	(*AdvertiseTaskRequest)(nil),                 // 38: taskcore.v1.AdvertiseTaskRequest
	(*AdvertiseTaskResponse)(nil),                // 39: taskcore.v1.AdvertiseTaskResponse
	(*StitchTasksRequest)(nil),                   // 40: taskcore.v1.StitchTasksRequest
	(*StitchTasksResponse)(nil),                  // 41: taskcore.v1.StitchTasksResponse
	(*ListTasksRequest)(nil),                     // 42: taskcore.v1.ListTasksRequest
	(*ListTasksResponse)(nil),                    // 43: taskcore.v1.ListTasksResponse
	(*GetTaskRequest)(nil),                       // 44: taskcore.v1.GetTaskRequest
	(*GetTaskResponse)(nil),                      // 45: taskcore.v1.GetTaskResponse
	(*GetTaskDAGRequest)(nil),                    // 46: taskcore.v1.GetTaskDAGRequest
	(*GetTaskDAGResponse)(nil),                   // 47: taskcore.v1.GetTaskDAGResponse
	(*ResolveTaskIDRequest)(nil),                 // 48: taskcore.v1.ResolveTaskIDRequest
	(*ResolveTaskIDResponse)(nil),                // 49: taskcore.v1.ResolveTaskIDResponse
	(*ResolveUserIDRequest)(nil),                 // 50: taskcore.v1.ResolveUserIDRequest
	(*ResolveUserIDResponse)(nil),                // 51: taskcore.v1.ResolveUserIDResponse
	nil,                                          // 52: taskcore.v1.Task.TagsEntry
	nil,                                          // 53: taskcore.v1.UpdateTaskTagsRequest.TagsEntry
	nil,                                          // 54: taskcore.v1.MoveToStagingRequest.TagsEntry
	(*MoveToStagingRequest_NewLocationList)(nil), // 55: taskcore.v1.MoveToStagingRequest.NewLocationList
	nil,                           // 56: taskcore.v1.GetTaskDAGResponse.MinimumPrefixesEntry
	(*timestamppb.Timestamp)(nil), // 57: google.protobuf.Timestamp
}
var file_task_proto_depIdxs = []int32{
	5,  // 0: taskcore.v1.User.notification_settings:type_name -> taskcore.v1.NotificationSetting
	3,  // 1: taskcore.v1.NotificationSetting.type:type_name -> taskcore.v1.NotificationType
	2,  // 2: taskcore.v1.TagValue.type:type_name -> taskcore.v1.TagType
	6,  // 3: taskcore.v1.TagValue.location_value:type_name -> taskcore.v1.GeographicLocation
	57, // 4: taskcore.v1.TagValue.time_value:type_name -> google.protobuf.Timestamp
	57, // 5: taskcore.v1.WorkInterval.start:type_name -> google.protobuf.Timestamp
	57, // 6: taskcore.v1.WorkInterval.stop:type_name -> google.protobuf.Timestamp
	8,  // 7: taskcore.v1.WorkInterval.points_completed:type_name -> taskcore.v1.Point
	9,  // 8: taskcore.v1.Schedule.work_intervals:type_name -> taskcore.v1.WorkInterval
	57, // 9: taskcore.v1.Schedule.due:type_name -> google.protobuf.Timestamp
	57, // 10: taskcore.v1.StatusUpdate.time:type_name -> google.protobuf.Timestamp
	11, // 11: taskcore.v1.Status.updates:type_name -> taskcore.v1.StatusUpdate
	0,  // 12: taskcore.v1.Task.stage:type_name -> taskcore.v1.TaskStage
	1,  // 13: taskcore.v1.Task.status:type_name -> taskcore.v1.TaskStatus
	8,  // 14: taskcore.v1.Task.points:type_name -> taskcore.v1.Point
	10, // 15: taskcore.v1.Task.schedule:type_name -> taskcore.v1.Schedule
	12, // 16: taskcore.v1.Task.status_history:type_name -> taskcore.v1.Status
	52, // 17: taskcore.v1.Task.tags:type_name -> taskcore.v1.Task.TagsEntry
	57, // 18: taskcore.v1.Task.created_at:type_name -> google.protobuf.Timestamp
	57, // 19: taskcore.v1.Task.updated_at:type_name -> google.protobuf.Timestamp
	13, // 20: taskcore.v1.AddTaskResponse.task:type_name -> taskcore.v1.Task
	53, // 21: taskcore.v1.UpdateTaskTagsRequest.tags:type_name -> taskcore.v1.UpdateTaskTagsRequest.TagsEntry
	13, // 22: taskcore.v1.UpdateTaskTagsResponse.task:type_name -> taskcore.v1.Task
	4,  // 23: taskcore.v1.GetUserResponse.user:type_name -> taskcore.v1.User
	5,  // 24: taskcore.v1.CreateUserRequest.notification_settings:type_name -> taskcore.v1.NotificationSetting
	4,  // 25: taskcore.v1.CreateUserResponse.user:type_name -> taskcore.v1.User
	4,  // 26: taskcore.v1.UpdateUserRequest.user:type_name -> taskcore.v1.User
	4,  // 27: taskcore.v1.UpdateUserResponse.user:type_name -> taskcore.v1.User
	55, // 28: taskcore.v1.MoveToStagingRequest.new_location:type_name -> taskcore.v1.MoveToStagingRequest.NewLocationList
	8,  // 29: taskcore.v1.MoveToStagingRequest.points:type_name -> taskcore.v1.Point
	54, // 30: taskcore.v1.MoveToStagingRequest.tags:type_name -> taskcore.v1.MoveToStagingRequest.TagsEntry
	13, // 31: taskcore.v1.MoveToStagingResponse.task:type_name -> taskcore.v1.Task
	13, // 32: taskcore.v1.StartTaskResponse.task:type_name -> taskcore.v1.Task
	8,  // 33: taskcore.v1.StopTaskRequest.points_completed:type_name -> taskcore.v1.Point
	13, // 34: taskcore.v1.StopTaskResponse.task:type_name -> taskcore.v1.Task
	13, // 35: taskcore.v1.CompleteTaskResponse.task:type_name -> taskcore.v1.Task
	13, // 36: taskcore.v1.MergeTasksResponse.merged_task:type_name -> taskcore.v1.Task
	13, // 37: taskcore.v1.SplitTaskResponse.new_tasks:type_name -> taskcore.v1.Task
	13, // 38: taskcore.v1.AdvertiseTaskResponse.task:type_name -> taskcore.v1.Task
	13, // 39: taskcore.v1.StitchTasksResponse.updated_tasks:type_name -> taskcore.v1.Task
	0,  // 40: taskcore.v1.ListTasksRequest.stage:type_name -> taskcore.v1.TaskStage
	13, // 41: taskcore.v1.ListTasksResponse.tasks:type_name -> taskcore.v1.Task
	13, // 42: taskcore.v1.GetTaskResponse.task:type_name -> taskcore.v1.Task
	13, // 43: taskcore.v1.GetTaskDAGResponse.tasks:type_name -> taskcore.v1.Task
	56, // 44: taskcore.v1.GetTaskDAGResponse.minimum_prefixes:type_name -> taskcore.v1.GetTaskDAGResponse.MinimumPrefixesEntry
	7,  // 45: taskcore.v1.Task.TagsEntry.value:type_name -> taskcore.v1.TagValue
	7,  // 46: taskcore.v1.UpdateTaskTagsRequest.TagsEntry.value:type_name -> taskcore.v1.TagValue
	7,  // 47: taskcore.v1.MoveToStagingRequest.TagsEntry.value:type_name -> taskcore.v1.TagValue
	14, // 48: taskcore.v1.TaskService.AddTask:input_type -> taskcore.v1.AddTaskRequest
	26, // 49: taskcore.v1.TaskService.MoveToStaging:input_type -> taskcore.v1.MoveToStagingRequest
	28, // 50: taskcore.v1.TaskService.StartTask:input_type -> taskcore.v1.StartTaskRequest
	30, // 51: taskcore.v1.TaskService.StopTask:input_type -> taskcore.v1.StopTaskRequest
	32, // 52: taskcore.v1.TaskService.CompleteTask:input_type -> taskcore.v1.CompleteTaskRequest
	34, // 53: taskcore.v1.TaskService.MergeTasks:input_type -> taskcore.v1.MergeTasksRequest
	36, // 54: taskcore.v1.TaskService.SplitTask:input_type -> taskcore.v1.SplitTaskRequest
	38, // 55: taskcore.v1.TaskService.AdvertiseTask:input_type -> taskcore.v1.AdvertiseTaskRequest
	40, // 56: taskcore.v1.TaskService.StitchTasks:input_type -> taskcore.v1.StitchTasksRequest
	42, // 57: taskcore.v1.TaskService.ListTasks:input_type -> taskcore.v1.ListTasksRequest
	44, // 58: taskcore.v1.TaskService.GetTask:input_type -> taskcore.v1.GetTaskRequest
	46, // 59: taskcore.v1.TaskService.GetTaskDAG:input_type -> taskcore.v1.GetTaskDAGRequest
	16, // 60: taskcore.v1.TaskService.UpdateTaskTags:input_type -> taskcore.v1.UpdateTaskTagsRequest
	18, // 61: taskcore.v1.TaskService.SyncCalendar:input_type -> taskcore.v1.SyncCalendarRequest
	22, // 62: taskcore.v1.TaskService.CreateUser:input_type -> taskcore.v1.CreateUserRequest
	20, // 63: taskcore.v1.TaskService.GetUser:input_type -> taskcore.v1.GetUserRequest
	24, // 64: taskcore.v1.TaskService.UpdateUser:input_type -> taskcore.v1.UpdateUserRequest
	48, // 65: taskcore.v1.TaskService.ResolveTaskID:input_type -> taskcore.v1.ResolveTaskIDRequest
	50, // 66: taskcore.v1.TaskService.ResolveUserID:input_type -> taskcore.v1.ResolveUserIDRequest
	15, // 67: taskcore.v1.TaskService.AddTask:output_type -> taskcore.v1.AddTaskResponse
	27, // 68: taskcore.v1.TaskService.MoveToStaging:output_type -> taskcore.v1.MoveToStagingResponse
	29, // 69: taskcore.v1.TaskService.StartTask:output_type -> taskcore.v1.StartTaskResponse
	31, // 70: taskcore.v1.TaskService.StopTask:output_type -> taskcore.v1.StopTaskResponse
	33, // 71: taskcore.v1.TaskService.CompleteTask:output_type -> taskcore.v1.CompleteTaskResponse
	35, // 72: taskcore.v1.TaskService.MergeTasks:output_type -> taskcore.v1.MergeTasksResponse
	37, // 73: taskcore.v1.TaskService.SplitTask:output_type -> taskcore.v1.SplitTaskResponse
	39, // 74: taskcore.v1.TaskService.AdvertiseTask:output_type -> taskcore.v1.AdvertiseTaskResponse
	41, // 75: taskcore.v1.TaskService.StitchTasks:output_type -> taskcore.v1.StitchTasksResponse
	43, // 76: taskcore.v1.TaskService.ListTasks:output_type -> taskcore.v1.ListTasksResponse
	45, // 77: taskcore.v1.TaskService.GetTask:output_type -> taskcore.v1.GetTaskResponse
	47, // 78: taskcore.v1.TaskService.GetTaskDAG:output_type -> taskcore.v1.GetTaskDAGResponse
	17, // 79: taskcore.v1.TaskService.UpdateTaskTags:output_type -> taskcore.v1.UpdateTaskTagsResponse
	19, // 80: taskcore.v1.TaskService.SyncCalendar:output_type -> taskcore.v1.SyncCalendarResponse
	23, // 81: taskcore.v1.TaskService.CreateUser:output_type -> taskcore.v1.CreateUserResponse
	21, // 82: taskcore.v1.TaskService.GetUser:output_type -> taskcore.v1.GetUserResponse
	25, // 83: taskcore.v1.TaskService.UpdateUser:output_type -> taskcore.v1.UpdateUserResponse
	49, // 84: taskcore.v1.TaskService.ResolveTaskID:output_type -> taskcore.v1.ResolveTaskIDResponse
	51, // 85: taskcore.v1.TaskService.ResolveUserID:output_type -> taskcore.v1.ResolveUserIDResponse
	67, // [67:86] is the sub-list for method output_type
	48, // [48:67] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_task_proto_init() }
func file_task_proto_init() {
	if File_task_proto != nil {
		return
	}
	file_task_proto_msgTypes[3].OneofWrappers = []any{
		(*TagValue_TextValue)(nil),
		(*TagValue_LocationValue)(nil),
		(*TagValue_TimeValue)(nil),
	}
	file_task_proto_msgTypes[16].OneofWrappers = []any{
		(*GetUserRequest_UserId)(nil),
		(*GetUserRequest_Email)(nil),
		(*GetUserRequest_Unknown)(nil),
	}
	file_task_proto_msgTypes[22].OneofWrappers = []any{
		(*MoveToStagingRequest_DestinationId)(nil),
		(*MoveToStagingRequest_NewLocation)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_task_proto_rawDesc), len(file_task_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_task_proto_goTypes,
		DependencyIndexes: file_task_proto_depIdxs,
		EnumInfos:         file_task_proto_enumTypes,
		MessageInfos:      file_task_proto_msgTypes,
	}.Build()
	File_task_proto = out.File
	file_task_proto_goTypes = nil
	file_task_proto_depIdxs = nil
}
