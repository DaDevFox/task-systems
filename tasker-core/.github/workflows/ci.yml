name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Cache protoc
        uses: actions/cache@v4
        id: cache-protoc
        with:
          path: |
            /usr/bin/protoc
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-protoc-${{ hashFiles('**/go.sum') }}-v1
          restore-keys: |
            ${{ runner.os }}-protoc-

      - name: Install dependencies
        run: go mod download

      - name: Install protoc and plugins
        if: steps.cache-protoc.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Ensure protoc plugins are in PATH
        run: |
          if [ ! -f ~/go/bin/protoc-gen-go ]; then
            go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          fi
          if [ ! -f ~/go/bin/protoc-gen-go-grpc ]; then
            go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          fi
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Generate protobuf code
        run: |
          protoc --go_out=. --go_opt=paths=source_relative \
                 --go-grpc_out=. --go-grpc_opt=paths=source_relative \
                 proto/task.proto

      - name: Tidy dependencies
        run: go mod tidy

      - name: Run tests
        run: go test -v ./...

      - name: Run tests with coverage
        run: |
          go test -v -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html
          go tool cover -func=coverage.out > coverage.txt

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.out
            coverage.html
            coverage.txt

      - name: Run linters
        run: |
          go vet ./...
          go fmt ./...
          # Check if go fmt made any changes
          if [ -n "$(go fmt ./...)" ]; then
            echo "Code is not formatted. Please run 'go fmt ./...'"
            exit 1
          fi

      - name: Build server
        run: go build -o bin/task-server ./cmd/server

      - name: Build client
        run: go build -o bin/task-client ./cmd/client

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Install protoc and plugins
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Generate protobuf code
        run: |
          protoc --go_out=. --go_opt=paths=source_relative \
                 --go-grpc_out=. --go-grpc_opt=paths=source_relative \
                 proto/task.proto

      - name: Install and tidy dependencies
        run: |
          go mod tidy
          go mod download

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: "-fmt sarif -out gosec.sarif ./..."

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif
