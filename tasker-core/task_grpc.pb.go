// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: task.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskService_AddTask_FullMethodName        = "/taskcore.v1.TaskService/AddTask"
	TaskService_MoveToStaging_FullMethodName  = "/taskcore.v1.TaskService/MoveToStaging"
	TaskService_StartTask_FullMethodName      = "/taskcore.v1.TaskService/StartTask"
	TaskService_StopTask_FullMethodName       = "/taskcore.v1.TaskService/StopTask"
	TaskService_CompleteTask_FullMethodName   = "/taskcore.v1.TaskService/CompleteTask"
	TaskService_MergeTasks_FullMethodName     = "/taskcore.v1.TaskService/MergeTasks"
	TaskService_SplitTask_FullMethodName      = "/taskcore.v1.TaskService/SplitTask"
	TaskService_AdvertiseTask_FullMethodName  = "/taskcore.v1.TaskService/AdvertiseTask"
	TaskService_StitchTasks_FullMethodName    = "/taskcore.v1.TaskService/StitchTasks"
	TaskService_ListTasks_FullMethodName      = "/taskcore.v1.TaskService/ListTasks"
	TaskService_GetTask_FullMethodName        = "/taskcore.v1.TaskService/GetTask"
	TaskService_GetTaskDAG_FullMethodName     = "/taskcore.v1.TaskService/GetTaskDAG"
	TaskService_UpdateTaskTags_FullMethodName = "/taskcore.v1.TaskService/UpdateTaskTags"
	TaskService_SyncCalendar_FullMethodName   = "/taskcore.v1.TaskService/SyncCalendar"
	TaskService_CreateUser_FullMethodName     = "/taskcore.v1.TaskService/CreateUser"
	TaskService_GetUser_FullMethodName        = "/taskcore.v1.TaskService/GetUser"
	TaskService_UpdateUser_FullMethodName     = "/taskcore.v1.TaskService/UpdateUser"
	TaskService_ResolveTaskID_FullMethodName  = "/taskcore.v1.TaskService/ResolveTaskID"
	TaskService_ResolveUserID_FullMethodName  = "/taskcore.v1.TaskService/ResolveUserID"
)

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TaskService provides comprehensive task management operations.
// Supports the full task lifecycle from creation through completion,
// including dependency management, work tracking, and metadata handling.
type TaskServiceClient interface {
	// CreateTask adds a new task to the system
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error)
	// MoveToStaging transitions a task from PENDING/INBOX to STAGING
	// Sets up location, dependencies, and work points
	MoveToStaging(ctx context.Context, in *MoveToStagingRequest, opts ...grpc.CallOption) (*MoveToStagingResponse, error)
	// StartTask begins active work on a STAGING task
	// Creates work interval and moves to ACTIVE stage
	StartTask(ctx context.Context, in *StartTaskRequest, opts ...grpc.CallOption) (*StartTaskResponse, error)
	// StopTask pauses or completes an ACTIVE task
	// Records completed work and updates status
	StopTask(ctx context.Context, in *StopTaskRequest, opts ...grpc.CallOption) (*StopTaskResponse, error)
	// CompleteTask immediately marks a task as finished
	// Bypasses point tracking for quick completion
	CompleteTask(ctx context.Context, in *CompleteTaskRequest, opts ...grpc.CallOption) (*CompleteTaskResponse, error)
	// MergeTasks combines two tasks into one
	// Consolidates points, dependencies, and metadata
	MergeTasks(ctx context.Context, in *MergeTasksRequest, opts ...grpc.CallOption) (*MergeTasksResponse, error)
	// SplitTask breaks one task into multiple smaller tasks
	// Useful for decomposing complex work
	SplitTask(ctx context.Context, in *SplitTaskRequest, opts ...grpc.CallOption) (*SplitTaskResponse, error)
	// AdvertiseTask creates outbound dependencies
	// Makes this task a prerequisite for others
	AdvertiseTask(ctx context.Context, in *AdvertiseTaskRequest, opts ...grpc.CallOption) (*AdvertiseTaskResponse, error)
	// StitchTasks creates inbound dependencies
	// Makes target task depend on multiple sources
	StitchTasks(ctx context.Context, in *StitchTasksRequest, opts ...grpc.CallOption) (*StitchTasksResponse, error)
	// ListTasks retrieves tasks filtered by stage
	// Primary method for dashboard and workflow views
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	// GetTask retrieves a single task by ID
	// Used for detailed task views and editing
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
	// GetTaskDAG retrieves tasks in dependency order for DAG visualization
	// Returns tasks sorted topologically for ASCII graph rendering
	GetTaskDAG(ctx context.Context, in *GetTaskDAGRequest, opts ...grpc.CallOption) (*GetTaskDAGResponse, error)
	// UpdateTaskTags modifies task metadata
	// Supports rich categorization and custom fields
	UpdateTaskTags(ctx context.Context, in *UpdateTaskTagsRequest, opts ...grpc.CallOption) (*UpdateTaskTagsResponse, error)
	// SyncCalendar syncs tasks with Google Calendar
	SyncCalendar(ctx context.Context, in *SyncCalendarRequest, opts ...grpc.CallOption) (*SyncCalendarResponse, error)
	// CreateUser creates a new user in the system
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// GetUser retrieves user information
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// UpdateUser modifies user settings
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// ResolveTaskID resolves a task ID from partial input
	ResolveTaskID(ctx context.Context, in *ResolveTaskIDRequest, opts ...grpc.CallOption) (*ResolveTaskIDResponse, error)
	// ResolveUserID resolves a user ID from name or partial ID
	ResolveUserID(ctx context.Context, in *ResolveUserIDRequest, opts ...grpc.CallOption) (*ResolveUserIDResponse, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTaskResponse)
	err := c.cc.Invoke(ctx, TaskService_AddTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) MoveToStaging(ctx context.Context, in *MoveToStagingRequest, opts ...grpc.CallOption) (*MoveToStagingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveToStagingResponse)
	err := c.cc.Invoke(ctx, TaskService_MoveToStaging_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) StartTask(ctx context.Context, in *StartTaskRequest, opts ...grpc.CallOption) (*StartTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartTaskResponse)
	err := c.cc.Invoke(ctx, TaskService_StartTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) StopTask(ctx context.Context, in *StopTaskRequest, opts ...grpc.CallOption) (*StopTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopTaskResponse)
	err := c.cc.Invoke(ctx, TaskService_StopTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CompleteTask(ctx context.Context, in *CompleteTaskRequest, opts ...grpc.CallOption) (*CompleteTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteTaskResponse)
	err := c.cc.Invoke(ctx, TaskService_CompleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) MergeTasks(ctx context.Context, in *MergeTasksRequest, opts ...grpc.CallOption) (*MergeTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MergeTasksResponse)
	err := c.cc.Invoke(ctx, TaskService_MergeTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) SplitTask(ctx context.Context, in *SplitTaskRequest, opts ...grpc.CallOption) (*SplitTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SplitTaskResponse)
	err := c.cc.Invoke(ctx, TaskService_SplitTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) AdvertiseTask(ctx context.Context, in *AdvertiseTaskRequest, opts ...grpc.CallOption) (*AdvertiseTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdvertiseTaskResponse)
	err := c.cc.Invoke(ctx, TaskService_AdvertiseTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) StitchTasks(ctx context.Context, in *StitchTasksRequest, opts ...grpc.CallOption) (*StitchTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StitchTasksResponse)
	err := c.cc.Invoke(ctx, TaskService_StitchTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTasksResponse)
	err := c.cc.Invoke(ctx, TaskService_ListTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, TaskService_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskDAG(ctx context.Context, in *GetTaskDAGRequest, opts ...grpc.CallOption) (*GetTaskDAGResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskDAGResponse)
	err := c.cc.Invoke(ctx, TaskService_GetTaskDAG_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpdateTaskTags(ctx context.Context, in *UpdateTaskTagsRequest, opts ...grpc.CallOption) (*UpdateTaskTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaskTagsResponse)
	err := c.cc.Invoke(ctx, TaskService_UpdateTaskTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) SyncCalendar(ctx context.Context, in *SyncCalendarRequest, opts ...grpc.CallOption) (*SyncCalendarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncCalendarResponse)
	err := c.cc.Invoke(ctx, TaskService_SyncCalendar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, TaskService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, TaskService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, TaskService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ResolveTaskID(ctx context.Context, in *ResolveTaskIDRequest, opts ...grpc.CallOption) (*ResolveTaskIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveTaskIDResponse)
	err := c.cc.Invoke(ctx, TaskService_ResolveTaskID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ResolveUserID(ctx context.Context, in *ResolveUserIDRequest, opts ...grpc.CallOption) (*ResolveUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveUserIDResponse)
	err := c.cc.Invoke(ctx, TaskService_ResolveUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility.
//
// TaskService provides comprehensive task management operations.
// Supports the full task lifecycle from creation through completion,
// including dependency management, work tracking, and metadata handling.
type TaskServiceServer interface {
	// CreateTask adds a new task to the system
	AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error)
	// MoveToStaging transitions a task from PENDING/INBOX to STAGING
	// Sets up location, dependencies, and work points
	MoveToStaging(context.Context, *MoveToStagingRequest) (*MoveToStagingResponse, error)
	// StartTask begins active work on a STAGING task
	// Creates work interval and moves to ACTIVE stage
	StartTask(context.Context, *StartTaskRequest) (*StartTaskResponse, error)
	// StopTask pauses or completes an ACTIVE task
	// Records completed work and updates status
	StopTask(context.Context, *StopTaskRequest) (*StopTaskResponse, error)
	// CompleteTask immediately marks a task as finished
	// Bypasses point tracking for quick completion
	CompleteTask(context.Context, *CompleteTaskRequest) (*CompleteTaskResponse, error)
	// MergeTasks combines two tasks into one
	// Consolidates points, dependencies, and metadata
	MergeTasks(context.Context, *MergeTasksRequest) (*MergeTasksResponse, error)
	// SplitTask breaks one task into multiple smaller tasks
	// Useful for decomposing complex work
	SplitTask(context.Context, *SplitTaskRequest) (*SplitTaskResponse, error)
	// AdvertiseTask creates outbound dependencies
	// Makes this task a prerequisite for others
	AdvertiseTask(context.Context, *AdvertiseTaskRequest) (*AdvertiseTaskResponse, error)
	// StitchTasks creates inbound dependencies
	// Makes target task depend on multiple sources
	StitchTasks(context.Context, *StitchTasksRequest) (*StitchTasksResponse, error)
	// ListTasks retrieves tasks filtered by stage
	// Primary method for dashboard and workflow views
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	// GetTask retrieves a single task by ID
	// Used for detailed task views and editing
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	// GetTaskDAG retrieves tasks in dependency order for DAG visualization
	// Returns tasks sorted topologically for ASCII graph rendering
	GetTaskDAG(context.Context, *GetTaskDAGRequest) (*GetTaskDAGResponse, error)
	// UpdateTaskTags modifies task metadata
	// Supports rich categorization and custom fields
	UpdateTaskTags(context.Context, *UpdateTaskTagsRequest) (*UpdateTaskTagsResponse, error)
	// SyncCalendar syncs tasks with Google Calendar
	SyncCalendar(context.Context, *SyncCalendarRequest) (*SyncCalendarResponse, error)
	// CreateUser creates a new user in the system
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// GetUser retrieves user information
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// UpdateUser modifies user settings
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// ResolveTaskID resolves a task ID from partial input
	ResolveTaskID(context.Context, *ResolveTaskIDRequest) (*ResolveTaskIDResponse, error)
	// ResolveUserID resolves a user ID from name or partial ID
	ResolveUserID(context.Context, *ResolveUserIDRequest) (*ResolveUserIDResponse, error)
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskServiceServer struct{}

func (UnimplementedTaskServiceServer) AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedTaskServiceServer) MoveToStaging(context.Context, *MoveToStagingRequest) (*MoveToStagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveToStaging not implemented")
}
func (UnimplementedTaskServiceServer) StartTask(context.Context, *StartTaskRequest) (*StartTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTask not implemented")
}
func (UnimplementedTaskServiceServer) StopTask(context.Context, *StopTaskRequest) (*StopTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTask not implemented")
}
func (UnimplementedTaskServiceServer) CompleteTask(context.Context, *CompleteTaskRequest) (*CompleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTask not implemented")
}
func (UnimplementedTaskServiceServer) MergeTasks(context.Context, *MergeTasksRequest) (*MergeTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeTasks not implemented")
}
func (UnimplementedTaskServiceServer) SplitTask(context.Context, *SplitTaskRequest) (*SplitTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitTask not implemented")
}
func (UnimplementedTaskServiceServer) AdvertiseTask(context.Context, *AdvertiseTaskRequest) (*AdvertiseTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdvertiseTask not implemented")
}
func (UnimplementedTaskServiceServer) StitchTasks(context.Context, *StitchTasksRequest) (*StitchTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StitchTasks not implemented")
}
func (UnimplementedTaskServiceServer) ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedTaskServiceServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskServiceServer) GetTaskDAG(context.Context, *GetTaskDAGRequest) (*GetTaskDAGResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskDAG not implemented")
}
func (UnimplementedTaskServiceServer) UpdateTaskTags(context.Context, *UpdateTaskTagsRequest) (*UpdateTaskTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskTags not implemented")
}
func (UnimplementedTaskServiceServer) SyncCalendar(context.Context, *SyncCalendarRequest) (*SyncCalendarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncCalendar not implemented")
}
func (UnimplementedTaskServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedTaskServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedTaskServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedTaskServiceServer) ResolveTaskID(context.Context, *ResolveTaskIDRequest) (*ResolveTaskIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveTaskID not implemented")
}
func (UnimplementedTaskServiceServer) ResolveUserID(context.Context, *ResolveUserIDRequest) (*ResolveUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveUserID not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}
func (UnimplementedTaskServiceServer) testEmbeddedByValue()                     {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	// If the following call pancis, it indicates UnimplementedTaskServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_AddTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).AddTask(ctx, req.(*AddTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_MoveToStaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveToStagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).MoveToStaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_MoveToStaging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).MoveToStaging(ctx, req.(*MoveToStagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_StartTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).StartTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_StartTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).StartTask(ctx, req.(*StartTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_StopTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).StopTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_StopTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).StopTask(ctx, req.(*StopTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CompleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CompleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_CompleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CompleteTask(ctx, req.(*CompleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_MergeTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).MergeTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_MergeTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).MergeTasks(ctx, req.(*MergeTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_SplitTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).SplitTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_SplitTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).SplitTask(ctx, req.(*SplitTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_AdvertiseTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertiseTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).AdvertiseTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_AdvertiseTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).AdvertiseTask(ctx, req.(*AdvertiseTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_StitchTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StitchTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).StitchTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_StitchTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).StitchTasks(ctx, req.(*StitchTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskDAG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskDAGRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskDAG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_GetTaskDAG_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskDAG(ctx, req.(*GetTaskDAGRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpdateTaskTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpdateTaskTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_UpdateTaskTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpdateTaskTags(ctx, req.(*UpdateTaskTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_SyncCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).SyncCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_SyncCalendar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).SyncCalendar(ctx, req.(*SyncCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ResolveTaskID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveTaskIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ResolveTaskID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_ResolveTaskID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ResolveTaskID(ctx, req.(*ResolveTaskIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ResolveUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ResolveUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_ResolveUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ResolveUserID(ctx, req.(*ResolveUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taskcore.v1.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _TaskService_AddTask_Handler,
		},
		{
			MethodName: "MoveToStaging",
			Handler:    _TaskService_MoveToStaging_Handler,
		},
		{
			MethodName: "StartTask",
			Handler:    _TaskService_StartTask_Handler,
		},
		{
			MethodName: "StopTask",
			Handler:    _TaskService_StopTask_Handler,
		},
		{
			MethodName: "CompleteTask",
			Handler:    _TaskService_CompleteTask_Handler,
		},
		{
			MethodName: "MergeTasks",
			Handler:    _TaskService_MergeTasks_Handler,
		},
		{
			MethodName: "SplitTask",
			Handler:    _TaskService_SplitTask_Handler,
		},
		{
			MethodName: "AdvertiseTask",
			Handler:    _TaskService_AdvertiseTask_Handler,
		},
		{
			MethodName: "StitchTasks",
			Handler:    _TaskService_StitchTasks_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _TaskService_ListTasks_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TaskService_GetTask_Handler,
		},
		{
			MethodName: "GetTaskDAG",
			Handler:    _TaskService_GetTaskDAG_Handler,
		},
		{
			MethodName: "UpdateTaskTags",
			Handler:    _TaskService_UpdateTaskTags_Handler,
		},
		{
			MethodName: "SyncCalendar",
			Handler:    _TaskService_SyncCalendar_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _TaskService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _TaskService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _TaskService_UpdateUser_Handler,
		},
		{
			MethodName: "ResolveTaskID",
			Handler:    _TaskService_ResolveTaskID_Handler,
		},
		{
			MethodName: "ResolveUserID",
			Handler:    _TaskService_ResolveUserID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
