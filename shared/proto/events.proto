syntax = "proto3";

package shared.events.v1;

option go_package = "github.com/DaDevFox/task-systems/shared/proto/events/v1";

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

// EventType defines the types of events that can be published across services
enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  
  // Inventory events
  INVENTORY_LEVEL_CHANGED = 100;
  INVENTORY_LOW_STOCK_ALERT = 101;
  INVENTORY_CONSUMPTION_PREDICTED = 102;
  
  // Task events  
  TASK_CREATED = 200;
  TASK_STAGE_CHANGED = 201;
  TASK_COMPLETED = 202;
  TASK_ASSIGNED = 203;
  
  // Home management events
  GROUP_TASK_ASSIGNED = 300;
  SCHEDULE_TRIGGER = 301;
  PIPELINE_WORK_STARTED = 302;
  PIPELINE_WORK_COMPLETED = 303;
}

// Event represents a system-wide event that can be published and consumed
message Event {
  string id = 1;                                    // Unique event identifier
  EventType type = 2;                              // Type of event
  string source_service = 3;                       // Service that published the event
  google.protobuf.Timestamp timestamp = 4;        // When event occurred
  google.protobuf.Any payload = 5;                 // Event-specific data
  map<string, string> metadata = 6;               // Additional context
}

// InventoryLevelChangedEvent is published when inventory levels change
message InventoryLevelChangedEvent {
  string item_id = 1;
  string item_name = 2;
  double previous_level = 3;
  double new_level = 4;
  string unit = 5;
  double threshold = 6;                            // Low stock threshold
  bool below_threshold = 7;                        // Whether new level is below threshold
}

// TaskCompletedEvent is published when a task is marked as completed
message TaskCompletedEvent {
  string task_id = 1;
  string task_name = 2;
  string user_id = 3;
  string location_path = 4;                        // Hierarchical task location
  repeated string completed_points = 5;            // Points that were completed
  google.protobuf.Timestamp completion_time = 6;
}

// TaskAssignedEvent is published when a task is assigned to a user
message TaskAssignedEvent {
  string task_id = 1;
  string task_name = 2;
  string user_id = 3;
  string assigned_by = 4;                          // Who assigned the task
  google.protobuf.Timestamp assigned_at = 5;
  string group_id = 6;                             // Optional group context
}

// ScheduleTriggerEvent is published when a scheduled trigger fires
message ScheduleTriggerEvent {
  string trigger_id = 1;
  string trigger_name = 2;
  string cron_expression = 3;                      // Original schedule
  map<string, string> context = 4;                // Additional trigger context
}
