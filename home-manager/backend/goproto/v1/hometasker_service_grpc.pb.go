// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/hometasker_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HometaskerService_MarkTaskComplete_FullMethodName   = "/hometasker.v1.HometaskerService/MarkTaskComplete"
	HometaskerService_MarkReviewComplete_FullMethodName = "/hometasker.v1.HometaskerService/MarkReviewComplete"
	HometaskerService_AddPileValue_FullMethodName       = "/hometasker.v1.HometaskerService/AddPileValue"
	HometaskerService_GetLeaderboard_FullMethodName     = "/hometasker.v1.HometaskerService/GetLeaderboard"
)

// HometaskerServiceClient is the client API for HometaskerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HometaskerServiceClient interface {
	MarkTaskComplete(ctx context.Context, in *MarkTaskRequest, opts ...grpc.CallOption) (*MarkTaskResponse, error)
	MarkReviewComplete(ctx context.Context, in *MarkReviewRequest, opts ...grpc.CallOption) (*MarkReviewResponse, error)
	AddPileValue(ctx context.Context, in *AddPileRequest, opts ...grpc.CallOption) (*AddPileResponse, error)
	GetLeaderboard(ctx context.Context, in *LeaderboardRequest, opts ...grpc.CallOption) (*LeaderboardResponse, error)
}

type hometaskerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHometaskerServiceClient(cc grpc.ClientConnInterface) HometaskerServiceClient {
	return &hometaskerServiceClient{cc}
}

func (c *hometaskerServiceClient) MarkTaskComplete(ctx context.Context, in *MarkTaskRequest, opts ...grpc.CallOption) (*MarkTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkTaskResponse)
	err := c.cc.Invoke(ctx, HometaskerService_MarkTaskComplete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hometaskerServiceClient) MarkReviewComplete(ctx context.Context, in *MarkReviewRequest, opts ...grpc.CallOption) (*MarkReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkReviewResponse)
	err := c.cc.Invoke(ctx, HometaskerService_MarkReviewComplete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hometaskerServiceClient) AddPileValue(ctx context.Context, in *AddPileRequest, opts ...grpc.CallOption) (*AddPileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPileResponse)
	err := c.cc.Invoke(ctx, HometaskerService_AddPileValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hometaskerServiceClient) GetLeaderboard(ctx context.Context, in *LeaderboardRequest, opts ...grpc.CallOption) (*LeaderboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaderboardResponse)
	err := c.cc.Invoke(ctx, HometaskerService_GetLeaderboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HometaskerServiceServer is the server API for HometaskerService service.
// All implementations must embed UnimplementedHometaskerServiceServer
// for forward compatibility.
type HometaskerServiceServer interface {
	MarkTaskComplete(context.Context, *MarkTaskRequest) (*MarkTaskResponse, error)
	MarkReviewComplete(context.Context, *MarkReviewRequest) (*MarkReviewResponse, error)
	AddPileValue(context.Context, *AddPileRequest) (*AddPileResponse, error)
	GetLeaderboard(context.Context, *LeaderboardRequest) (*LeaderboardResponse, error)
	mustEmbedUnimplementedHometaskerServiceServer()
}

// UnimplementedHometaskerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHometaskerServiceServer struct{}

func (UnimplementedHometaskerServiceServer) MarkTaskComplete(context.Context, *MarkTaskRequest) (*MarkTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkTaskComplete not implemented")
}
func (UnimplementedHometaskerServiceServer) MarkReviewComplete(context.Context, *MarkReviewRequest) (*MarkReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkReviewComplete not implemented")
}
func (UnimplementedHometaskerServiceServer) AddPileValue(context.Context, *AddPileRequest) (*AddPileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPileValue not implemented")
}
func (UnimplementedHometaskerServiceServer) GetLeaderboard(context.Context, *LeaderboardRequest) (*LeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderboard not implemented")
}
func (UnimplementedHometaskerServiceServer) mustEmbedUnimplementedHometaskerServiceServer() {}
func (UnimplementedHometaskerServiceServer) testEmbeddedByValue()                           {}

// UnsafeHometaskerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HometaskerServiceServer will
// result in compilation errors.
type UnsafeHometaskerServiceServer interface {
	mustEmbedUnimplementedHometaskerServiceServer()
}

func RegisterHometaskerServiceServer(s grpc.ServiceRegistrar, srv HometaskerServiceServer) {
	// If the following call pancis, it indicates UnimplementedHometaskerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HometaskerService_ServiceDesc, srv)
}

func _HometaskerService_MarkTaskComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HometaskerServiceServer).MarkTaskComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HometaskerService_MarkTaskComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HometaskerServiceServer).MarkTaskComplete(ctx, req.(*MarkTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HometaskerService_MarkReviewComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HometaskerServiceServer).MarkReviewComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HometaskerService_MarkReviewComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HometaskerServiceServer).MarkReviewComplete(ctx, req.(*MarkReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HometaskerService_AddPileValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HometaskerServiceServer).AddPileValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HometaskerService_AddPileValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HometaskerServiceServer).AddPileValue(ctx, req.(*AddPileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HometaskerService_GetLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HometaskerServiceServer).GetLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HometaskerService_GetLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HometaskerServiceServer).GetLeaderboard(ctx, req.(*LeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HometaskerService_ServiceDesc is the grpc.ServiceDesc for HometaskerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HometaskerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hometasker.v1.HometaskerService",
	HandlerType: (*HometaskerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MarkTaskComplete",
			Handler:    _HometaskerService_MarkTaskComplete_Handler,
		},
		{
			MethodName: "MarkReviewComplete",
			Handler:    _HometaskerService_MarkReviewComplete_Handler,
		},
		{
			MethodName: "AddPileValue",
			Handler:    _HometaskerService_AddPileValue_Handler,
		},
		{
			MethodName: "GetLeaderboard",
			Handler:    _HometaskerService_GetLeaderboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/hometasker_service.proto",
}
