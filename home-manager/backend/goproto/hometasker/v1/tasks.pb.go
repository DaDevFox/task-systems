// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: tasks.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type COMPARISON int32

const (
	COMPARISON_COMPARISON_UNSPECIFIED COMPARISON = 0
	COMPARISON_LESS_THAN              COMPARISON = 1
	COMPARISON_GREATER_THAN           COMPARISON = 2
	COMPARISON_EQUALS                 COMPARISON = 3
)

// Enum value maps for COMPARISON.
var (
	COMPARISON_name = map[int32]string{
		0: "COMPARISON_UNSPECIFIED",
		1: "LESS_THAN",
		2: "GREATER_THAN",
		3: "EQUALS",
	}
	COMPARISON_value = map[string]int32{
		"COMPARISON_UNSPECIFIED": 0,
		"LESS_THAN":              1,
		"GREATER_THAN":           2,
		"EQUALS":                 3,
	}
)

func (x COMPARISON) Enum() *COMPARISON {
	p := new(COMPARISON)
	*p = x
	return p
}

func (x COMPARISON) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COMPARISON) Descriptor() protoreflect.EnumDescriptor {
	return file_tasks_proto_enumTypes[0].Descriptor()
}

func (COMPARISON) Type() protoreflect.EnumType {
	return &file_tasks_proto_enumTypes[0]
}

func (x COMPARISON) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COMPARISON.Descriptor instead.
func (COMPARISON) EnumDescriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{0}
}

type Operand int32

const (
	Operand_OPERAND_UNSPECIFIED Operand = 0
	Operand_OPERAND_ADD         Operand = 1
	Operand_OPERAND_SUBTRACT    Operand = 2
	Operand_OPERAND_DIVIDE      Operand = 3
	Operand_OPERAND_MULTIPLY    Operand = 4
	Operand_OPERAND_SET         Operand = 5 // set the pile to a specific value
)

// Enum value maps for Operand.
var (
	Operand_name = map[int32]string{
		0: "OPERAND_UNSPECIFIED",
		1: "OPERAND_ADD",
		2: "OPERAND_SUBTRACT",
		3: "OPERAND_DIVIDE",
		4: "OPERAND_MULTIPLY",
		5: "OPERAND_SET",
	}
	Operand_value = map[string]int32{
		"OPERAND_UNSPECIFIED": 0,
		"OPERAND_ADD":         1,
		"OPERAND_SUBTRACT":    2,
		"OPERAND_DIVIDE":      3,
		"OPERAND_MULTIPLY":    4,
		"OPERAND_SET":         5,
	}
)

func (x Operand) Enum() *Operand {
	p := new(Operand)
	*p = x
	return p
}

func (x Operand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operand) Descriptor() protoreflect.EnumDescriptor {
	return file_tasks_proto_enumTypes[1].Descriptor()
}

func (Operand) Type() protoreflect.EnumType {
	return &file_tasks_proto_enumTypes[1]
}

func (x Operand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operand.Descriptor instead.
func (Operand) EnumDescriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{1}
}

type TASK_STATUS int32

const (
	TASK_STATUS_PENDING         TASK_STATUS = 0 // Task is pending
	TASK_STATUS_ASSIGNED        TASK_STATUS = 1 // Task has been assigned
	TASK_STATUS_REVIEW_ASSIGNED TASK_STATUS = 2 // Task has been completed, awaiting greview
	TASK_STATUS_COMPLETE        TASK_STATUS = 3 // Task has been completed (no review required, OR review complete)
)

// Enum value maps for TASK_STATUS.
var (
	TASK_STATUS_name = map[int32]string{
		0: "PENDING",
		1: "ASSIGNED",
		2: "REVIEW_ASSIGNED",
		3: "COMPLETE",
	}
	TASK_STATUS_value = map[string]int32{
		"PENDING":         0,
		"ASSIGNED":        1,
		"REVIEW_ASSIGNED": 2,
		"COMPLETE":        3,
	}
)

func (x TASK_STATUS) Enum() *TASK_STATUS {
	p := new(TASK_STATUS)
	*p = x
	return p
}

func (x TASK_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TASK_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_tasks_proto_enumTypes[2].Descriptor()
}

func (TASK_STATUS) Type() protoreflect.EnumType {
	return &file_tasks_proto_enumTypes[2]
}

func (x TASK_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TASK_STATUS.Descriptor instead.
func (TASK_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{2}
}

type TriggerWeeklySchedule_Day int32

const (
	TriggerWeeklySchedule_DAY_MONDAY    TriggerWeeklySchedule_Day = 0
	TriggerWeeklySchedule_DAY_TUESDAY   TriggerWeeklySchedule_Day = 1
	TriggerWeeklySchedule_DAY_WEDNESDAY TriggerWeeklySchedule_Day = 2
	TriggerWeeklySchedule_DAY_THURSDAY  TriggerWeeklySchedule_Day = 3
	TriggerWeeklySchedule_DAY_FRIDAY    TriggerWeeklySchedule_Day = 4
	TriggerWeeklySchedule_DAY_SATURDAY  TriggerWeeklySchedule_Day = 5
	TriggerWeeklySchedule_DAY_SUNDAY    TriggerWeeklySchedule_Day = 6
)

// Enum value maps for TriggerWeeklySchedule_Day.
var (
	TriggerWeeklySchedule_Day_name = map[int32]string{
		0: "DAY_MONDAY",
		1: "DAY_TUESDAY",
		2: "DAY_WEDNESDAY",
		3: "DAY_THURSDAY",
		4: "DAY_FRIDAY",
		5: "DAY_SATURDAY",
		6: "DAY_SUNDAY",
	}
	TriggerWeeklySchedule_Day_value = map[string]int32{
		"DAY_MONDAY":    0,
		"DAY_TUESDAY":   1,
		"DAY_WEDNESDAY": 2,
		"DAY_THURSDAY":  3,
		"DAY_FRIDAY":    4,
		"DAY_SATURDAY":  5,
		"DAY_SUNDAY":    6,
	}
)

func (x TriggerWeeklySchedule_Day) Enum() *TriggerWeeklySchedule_Day {
	p := new(TriggerWeeklySchedule_Day)
	*p = x
	return p
}

func (x TriggerWeeklySchedule_Day) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerWeeklySchedule_Day) Descriptor() protoreflect.EnumDescriptor {
	return file_tasks_proto_enumTypes[3].Descriptor()
}

func (TriggerWeeklySchedule_Day) Type() protoreflect.EnumType {
	return &file_tasks_proto_enumTypes[3]
}

func (x TriggerWeeklySchedule_Day) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerWeeklySchedule_Day.Descriptor instead.
func (TriggerWeeklySchedule_Day) EnumDescriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{18, 0}
}

type MealPlanAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MealPlanAction) Reset() {
	*x = MealPlanAction{}
	mi := &file_tasks_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanAction) ProtoMessage() {}

func (x *MealPlanAction) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanAction.ProtoReflect.Descriptor instead.
func (*MealPlanAction) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{0}
}

// TODO: add more special actions
type Action struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Action:
	//
	//	*Action_MealPlan
	Action        isAction_Action `protobuf_oneof:"action"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Action) Reset() {
	*x = Action{}
	mi := &file_tasks_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{1}
}

func (x *Action) GetAction() isAction_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Action) GetMealPlan() *MealPlanAction {
	if x != nil {
		if x, ok := x.Action.(*Action_MealPlan); ok {
			return x.MealPlan
		}
	}
	return nil
}

type isAction_Action interface {
	isAction_Action()
}

type Action_MealPlan struct {
	MealPlan *MealPlanAction `protobuf:"bytes,1,opt,name=meal_plan,json=mealPlan,proto3,oneof"` // Action to be performed on the meal plan, if applicable
}

func (*Action_MealPlan) isAction_Action() {}

type ModifyPileResult struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PileId          string                 `protobuf:"bytes,1,opt,name=pile_id,json=pileId,proto3" json:"pile_id,omitempty"`                 // ID of the pile that was updated
	Operand         Operand                `protobuf:"varint,2,opt,name=operand,proto3,enum=hometasker.v1.Operand" json:"operand,omitempty"` // Operation that was performed on the pile
	Value           int32                  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	IncludeSubpiles *bool                  `protobuf:"varint,4,opt,name=include_subpiles,json=includeSubpiles,proto3,oneof" json:"include_subpiles,omitempty"` // If set && true, the operation was applied to subpiles as well
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ModifyPileResult) Reset() {
	*x = ModifyPileResult{}
	mi := &file_tasks_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyPileResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyPileResult) ProtoMessage() {}

func (x *ModifyPileResult) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyPileResult.ProtoReflect.Descriptor instead.
func (*ModifyPileResult) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{2}
}

func (x *ModifyPileResult) GetPileId() string {
	if x != nil {
		return x.PileId
	}
	return ""
}

func (x *ModifyPileResult) GetOperand() Operand {
	if x != nil {
		return x.Operand
	}
	return Operand_OPERAND_UNSPECIFIED
}

func (x *ModifyPileResult) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ModifyPileResult) GetIncludeSubpiles() bool {
	if x != nil && x.IncludeSubpiles != nil {
		return *x.IncludeSubpiles
	}
	return false
}

// TODO: add more result types
type Result struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Result:
	//
	//	*Result_ModifyPile
	Result        isResult_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_tasks_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{3}
}

func (x *Result) GetResult() isResult_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Result) GetModifyPile() *ModifyPileResult {
	if x != nil {
		if x, ok := x.Result.(*Result_ModifyPile); ok {
			return x.ModifyPile
		}
	}
	return nil
}

type isResult_Result interface {
	isResult_Result()
}

type Result_ModifyPile struct {
	ModifyPile *ModifyPileResult `protobuf:"bytes,1,opt,name=modify_pile,json=modifyPile,proto3,oneof"` // Result of modifying a pile
}

func (*Result_ModifyPile) isResult_Result() {}

// string substitutions:
// when triggered by a PileThresholdTrigger:
//
//	pile_id: %pile_id%
//	pile_display_name: %pile_display_name%
//	pile_description: %pile_description%
//
// ^ (for id, display_name and display_description)
type Task struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName        string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	DisplayDescription string                 `protobuf:"bytes,3,opt,name=display_description,json=displayDescription,proto3" json:"display_description,omitempty"`
	Action             *Action                `protobuf:"bytes,4,opt,name=action,proto3,oneof" json:"action,omitempty"` // Action to be performed on the meal plan, if applicable
	Result             *Result                `protobuf:"bytes,5,opt,name=result,proto3,oneof" json:"result,omitempty"` // Result of the task, if applicable
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_tasks_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{4}
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Task) GetDisplayDescription() string {
	if x != nil {
		return x.DisplayDescription
	}
	return ""
}

func (x *Task) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Task) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type NewAssigneeOrSameAsPrevious struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewAssigneeOrSameAsPrevious) Reset() {
	*x = NewAssigneeOrSameAsPrevious{}
	mi := &file_tasks_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewAssigneeOrSameAsPrevious) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAssigneeOrSameAsPrevious) ProtoMessage() {}

func (x *NewAssigneeOrSameAsPrevious) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAssigneeOrSameAsPrevious.ProtoReflect.Descriptor instead.
func (*NewAssigneeOrSameAsPrevious) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{5}
}

type NewAssignee struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewAssignee) Reset() {
	*x = NewAssignee{}
	mi := &file_tasks_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewAssignee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAssignee) ProtoMessage() {}

func (x *NewAssignee) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAssignee.ProtoReflect.Descriptor instead.
func (*NewAssignee) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{6}
}

type GroupAssignees struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalCapacity int32                  `protobuf:"varint,1,opt,name=total_capacity,json=totalCapacity,proto3" json:"total_capacity,omitempty"` // Desired total capacity of the group of assignees
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupAssignees) Reset() {
	*x = GroupAssignees{}
	mi := &file_tasks_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupAssignees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupAssignees) ProtoMessage() {}

func (x *GroupAssignees) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupAssignees.ProtoReflect.Descriptor instead.
func (*GroupAssignees) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{7}
}

func (x *GroupAssignees) GetTotalCapacity() int32 {
	if x != nil {
		return x.TotalCapacity
	}
	return 0
}

type TaskAssignment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Assignment:
	//
	//	*TaskAssignment_NewAssigneeOrSameAsPrevious
	//	*TaskAssignment_NewAssignee
	//	*TaskAssignment_GroupAssignees
	Assignment    isTaskAssignment_Assignment `protobuf_oneof:"assignment"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskAssignment) Reset() {
	*x = TaskAssignment{}
	mi := &file_tasks_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAssignment) ProtoMessage() {}

func (x *TaskAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAssignment.ProtoReflect.Descriptor instead.
func (*TaskAssignment) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{8}
}

func (x *TaskAssignment) GetAssignment() isTaskAssignment_Assignment {
	if x != nil {
		return x.Assignment
	}
	return nil
}

func (x *TaskAssignment) GetNewAssigneeOrSameAsPrevious() *NewAssigneeOrSameAsPrevious {
	if x != nil {
		if x, ok := x.Assignment.(*TaskAssignment_NewAssigneeOrSameAsPrevious); ok {
			return x.NewAssigneeOrSameAsPrevious
		}
	}
	return nil
}

func (x *TaskAssignment) GetNewAssignee() *NewAssignee {
	if x != nil {
		if x, ok := x.Assignment.(*TaskAssignment_NewAssignee); ok {
			return x.NewAssignee
		}
	}
	return nil
}

func (x *TaskAssignment) GetGroupAssignees() *GroupAssignees {
	if x != nil {
		if x, ok := x.Assignment.(*TaskAssignment_GroupAssignees); ok {
			return x.GroupAssignees
		}
	}
	return nil
}

type isTaskAssignment_Assignment interface {
	isTaskAssignment_Assignment()
}

type TaskAssignment_NewAssigneeOrSameAsPrevious struct {
	NewAssigneeOrSameAsPrevious *NewAssigneeOrSameAsPrevious `protobuf:"bytes,1,opt,name=new_assignee_or_same_as_previous,json=newAssigneeOrSameAsPrevious,proto3,oneof"` // Assign to a new assignee or the same as previous
}

type TaskAssignment_NewAssignee struct {
	NewAssignee *NewAssignee `protobuf:"bytes,2,opt,name=new_assignee,json=newAssignee,proto3,oneof"` // Assign to a new assignee
}

type TaskAssignment_GroupAssignees struct {
	GroupAssignees *GroupAssignees `protobuf:"bytes,3,opt,name=group_assignees,json=groupAssignees,proto3,oneof"` // Assign to a group of assignees with a total capacity
}

func (*TaskAssignment_NewAssigneeOrSameAsPrevious) isTaskAssignment_Assignment() {}

func (*TaskAssignment_NewAssignee) isTaskAssignment_Assignment() {}

func (*TaskAssignment_GroupAssignees) isTaskAssignment_Assignment() {}

type TaskStep struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Task               *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`                                                       // Task to be executed in this step
	AssignmentBehavior *TaskAssignment        `protobuf:"bytes,2,opt,name=assignment_behavior,json=assignmentBehavior,proto3" json:"assignment_behavior,omitempty"` // Assignment
	RequireReview      bool                   `protobuf:"varint,3,opt,name=require_review,json=requireReview,proto3" json:"require_review,omitempty"`               // If true, the task must be reviewed after completion and before proceeding to the next
	StartDelay         *durationpb.Duration   `protobuf:"bytes,4,opt,name=start_delay,json=startDelay,proto3,oneof" json:"start_delay,omitempty"`                   // Optoinal delay before task step commencement
	EndDelay           *durationpb.Duration   `protobuf:"bytes,5,opt,name=end_delay,json=endDelay,proto3,oneof" json:"end_delay,omitempty"`                         // Optional delay after task step completion before proceeding
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TaskStep) Reset() {
	*x = TaskStep{}
	mi := &file_tasks_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStep) ProtoMessage() {}

func (x *TaskStep) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStep.ProtoReflect.Descriptor instead.
func (*TaskStep) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{9}
}

func (x *TaskStep) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TaskStep) GetAssignmentBehavior() *TaskAssignment {
	if x != nil {
		return x.AssignmentBehavior
	}
	return nil
}

func (x *TaskStep) GetRequireReview() bool {
	if x != nil {
		return x.RequireReview
	}
	return false
}

func (x *TaskStep) GetStartDelay() *durationpb.Duration {
	if x != nil {
		return x.StartDelay
	}
	return nil
}

func (x *TaskStep) GetEndDelay() *durationpb.Duration {
	if x != nil {
		return x.EndDelay
	}
	return nil
}

// Allow flow of tasks through the pipeline even if currently processing
// + nothing; allow tasks to surpass each other (later arrival may leave
// before earlier arrival -- no timing/ordering guarantees)
type ConflictPolicySurpass struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConflictPolicySurpass) Reset() {
	*x = ConflictPolicySurpass{}
	mi := &file_tasks_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConflictPolicySurpass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConflictPolicySurpass) ProtoMessage() {}

func (x *ConflictPolicySurpass) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConflictPolicySurpass.ProtoReflect.Descriptor instead.
func (*ConflictPolicySurpass) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{10}
}

// Allow flow of tasks through the pipeline even if currently processing
// + still block tasks from surpassing each other (earliest arrived must leave first)
type ConflictPolicyStack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConflictPolicyStack) Reset() {
	*x = ConflictPolicyStack{}
	mi := &file_tasks_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConflictPolicyStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConflictPolicyStack) ProtoMessage() {}

func (x *ConflictPolicyStack) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConflictPolicyStack.ProtoReflect.Descriptor instead.
func (*ConflictPolicyStack) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{11}
}

// Allow flow of tasks through the pipeline even if currently processing
// + aggregate task points together once they join
type ConflictPolicyAggregate struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	MaxTransmissionUnit int32                  `protobuf:"varint,1,opt,name=max_transmission_unit,json=maxTransmissionUnit,proto3" json:"max_transmission_unit,omitempty"` // Maximum number of task points (from pile) that can be aggregated in a single flow. -1 => infinite
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ConflictPolicyAggregate) Reset() {
	*x = ConflictPolicyAggregate{}
	mi := &file_tasks_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConflictPolicyAggregate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConflictPolicyAggregate) ProtoMessage() {}

func (x *ConflictPolicyAggregate) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConflictPolicyAggregate.ProtoReflect.Descriptor instead.
func (*ConflictPolicyAggregate) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{12}
}

func (x *ConflictPolicyAggregate) GetMaxTransmissionUnit() int32 {
	if x != nil {
		return x.MaxTransmissionUnit
	}
	return 0
}

// Allow one task through the pipeline at any given moment; later arrivals replace earlier ones
type ConflictPolicyReplace struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConflictPolicyReplace) Reset() {
	*x = ConflictPolicyReplace{}
	mi := &file_tasks_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConflictPolicyReplace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConflictPolicyReplace) ProtoMessage() {}

func (x *ConflictPolicyReplace) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConflictPolicyReplace.ProtoReflect.Descriptor instead.
func (*ConflictPolicyReplace) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{13}
}

// Block flow of tasks through the pipeline while currently processing
type ConflictPolicyBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConflictPolicyBlock) Reset() {
	*x = ConflictPolicyBlock{}
	mi := &file_tasks_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConflictPolicyBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConflictPolicyBlock) ProtoMessage() {}

func (x *ConflictPolicyBlock) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConflictPolicyBlock.ProtoReflect.Descriptor instead.
func (*ConflictPolicyBlock) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{14}
}

// defines how pipleines handle inflow while currently processing
type ConflictPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Policy:
	//
	//	*ConflictPolicy_Aggregate
	//	*ConflictPolicy_Stack
	//	*ConflictPolicy_Surpass
	//	*ConflictPolicy_Block
	//	*ConflictPolicy_Replace
	Policy        isConflictPolicy_Policy `protobuf_oneof:"policy"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConflictPolicy) Reset() {
	*x = ConflictPolicy{}
	mi := &file_tasks_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConflictPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConflictPolicy) ProtoMessage() {}

func (x *ConflictPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConflictPolicy.ProtoReflect.Descriptor instead.
func (*ConflictPolicy) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{15}
}

func (x *ConflictPolicy) GetPolicy() isConflictPolicy_Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *ConflictPolicy) GetAggregate() *ConflictPolicyAggregate {
	if x != nil {
		if x, ok := x.Policy.(*ConflictPolicy_Aggregate); ok {
			return x.Aggregate
		}
	}
	return nil
}

func (x *ConflictPolicy) GetStack() *ConflictPolicyStack {
	if x != nil {
		if x, ok := x.Policy.(*ConflictPolicy_Stack); ok {
			return x.Stack
		}
	}
	return nil
}

func (x *ConflictPolicy) GetSurpass() *ConflictPolicyStack {
	if x != nil {
		if x, ok := x.Policy.(*ConflictPolicy_Surpass); ok {
			return x.Surpass
		}
	}
	return nil
}

func (x *ConflictPolicy) GetBlock() *ConflictPolicyBlock {
	if x != nil {
		if x, ok := x.Policy.(*ConflictPolicy_Block); ok {
			return x.Block
		}
	}
	return nil
}

func (x *ConflictPolicy) GetReplace() *ConflictPolicyReplace {
	if x != nil {
		if x, ok := x.Policy.(*ConflictPolicy_Replace); ok {
			return x.Replace
		}
	}
	return nil
}

type isConflictPolicy_Policy interface {
	isConflictPolicy_Policy()
}

type ConflictPolicy_Aggregate struct {
	Aggregate *ConflictPolicyAggregate `protobuf:"bytes,1,opt,name=aggregate,proto3,oneof"` // Aggregate tasks while processing up to a maximum transmission unit (FIFO respected)
}

type ConflictPolicy_Stack struct {
	Stack *ConflictPolicyStack `protobuf:"bytes,2,opt,name=stack,proto3,oneof"` // Stack incoming tasks but block movement which breaks in-order traversal (FIFO respected)
}

type ConflictPolicy_Surpass struct {
	Surpass *ConflictPolicyStack `protobuf:"bytes,3,opt,name=surpass,proto3,oneof"` // Place no restrictions on task flow
}

type ConflictPolicy_Block struct {
	Block *ConflictPolicyBlock `protobuf:"bytes,4,opt,name=block,proto3,oneof"` // Block incoming tasks while existing tasks are processing
}

type ConflictPolicy_Replace struct {
	Replace *ConflictPolicyReplace `protobuf:"bytes,5,opt,name=replace,proto3,oneof"` // Replace existing tasks with incoming
}

func (*ConflictPolicy_Aggregate) isConflictPolicy_Policy() {}

func (*ConflictPolicy_Stack) isConflictPolicy_Policy() {}

func (*ConflictPolicy_Surpass) isConflictPolicy_Policy() {}

func (*ConflictPolicy_Block) isConflictPolicy_Policy() {}

func (*ConflictPolicy_Replace) isConflictPolicy_Policy() {}

// piplines link triggers, tasks (with actions sometimes), and results together
// if a pipeline is stuck in a current state for a while and it fires again,
// it may allow "flow" or "transfer" of pile points through the pipeline and
// aggregate tasks together at some points
type Pipeline struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`               // Unique identifier for the pipeline
	Condition []*Trigger             `protobuf:"bytes,2,rep,name=condition,proto3" json:"condition,omitempty"` // Condition that must be met for the trigger to fire
	// task that will be fired into assignee pool as a result of this trigger
	Steps          []*TaskStep     `protobuf:"bytes,3,rep,name=steps,proto3" json:"steps,omitempty"`                                               // Steps to be executed in this trigger
	ConflictPolicy *ConflictPolicy `protobuf:"bytes,4,opt,name=conflict_policy,json=conflictPolicy,proto3,oneof" json:"conflict_policy,omitempty"` // Policy for handling conflicts in task processing; defaults to ConflictPolicyBlock if not set
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Pipeline) Reset() {
	*x = Pipeline{}
	mi := &file_tasks_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipeline) ProtoMessage() {}

func (x *Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pipeline.ProtoReflect.Descriptor instead.
func (*Pipeline) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{16}
}

func (x *Pipeline) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Pipeline) GetCondition() []*Trigger {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Pipeline) GetSteps() []*TaskStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Pipeline) GetConflictPolicy() *ConflictPolicy {
	if x != nil {
		return x.ConflictPolicy
	}
	return nil
}

type Trigger struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Condition:
	//
	//	*Trigger_WeeklySchedule
	//	*Trigger_Interval
	//	*Trigger_PileThreshold
	Condition     isTrigger_Condition `protobuf_oneof:"condition"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	mi := &file_tasks_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{17}
}

func (x *Trigger) GetCondition() isTrigger_Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Trigger) GetWeeklySchedule() *TriggerWeeklySchedule {
	if x != nil {
		if x, ok := x.Condition.(*Trigger_WeeklySchedule); ok {
			return x.WeeklySchedule
		}
	}
	return nil
}

func (x *Trigger) GetInterval() *TriggerInterval {
	if x != nil {
		if x, ok := x.Condition.(*Trigger_Interval); ok {
			return x.Interval
		}
	}
	return nil
}

func (x *Trigger) GetPileThreshold() *TriggerPileThreshold {
	if x != nil {
		if x, ok := x.Condition.(*Trigger_PileThreshold); ok {
			return x.PileThreshold
		}
	}
	return nil
}

type isTrigger_Condition interface {
	isTrigger_Condition()
}

type Trigger_WeeklySchedule struct {
	WeeklySchedule *TriggerWeeklySchedule `protobuf:"bytes,1,opt,name=weekly_schedule,json=weeklySchedule,proto3,oneof"` // Trigger based on a weekly schedule
}

type Trigger_Interval struct {
	Interval *TriggerInterval `protobuf:"bytes,2,opt,name=interval,proto3,oneof"` // Trigger based on a time interval
}

type Trigger_PileThreshold struct {
	PileThreshold *TriggerPileThreshold `protobuf:"bytes,3,opt,name=pile_threshold,json=pileThreshold,proto3,oneof"` // Trigger based on a pile threshold
}

func (*Trigger_WeeklySchedule) isTrigger_Condition() {}

func (*Trigger_Interval) isTrigger_Condition() {}

func (*Trigger_PileThreshold) isTrigger_Condition() {}

type TriggerWeeklySchedule struct {
	state                protoimpl.MessageState    `protogen:"open.v1"`
	Day                  TriggerWeeklySchedule_Day `protobuf:"varint,1,opt,name=day,proto3,enum=hometasker.v1.TriggerWeeklySchedule_Day" json:"day,omitempty"` // Day of the week when the trigger will be fired
	SecondsSinceMidnight int32                     `protobuf:"varint,2,opt,name=seconds_since_midnight,json=secondsSinceMidnight,proto3" json:"seconds_since_midnight,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TriggerWeeklySchedule) Reset() {
	*x = TriggerWeeklySchedule{}
	mi := &file_tasks_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerWeeklySchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerWeeklySchedule) ProtoMessage() {}

func (x *TriggerWeeklySchedule) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerWeeklySchedule.ProtoReflect.Descriptor instead.
func (*TriggerWeeklySchedule) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{18}
}

func (x *TriggerWeeklySchedule) GetDay() TriggerWeeklySchedule_Day {
	if x != nil {
		return x.Day
	}
	return TriggerWeeklySchedule_DAY_MONDAY
}

func (x *TriggerWeeklySchedule) GetSecondsSinceMidnight() int32 {
	if x != nil {
		return x.SecondsSinceMidnight
	}
	return 0
}

type TriggerInterval struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Interval      *durationpb.Duration   `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"` // Interval after which the trigger will be fired
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TriggerInterval) Reset() {
	*x = TriggerInterval{}
	mi := &file_tasks_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerInterval) ProtoMessage() {}

func (x *TriggerInterval) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerInterval.ProtoReflect.Descriptor instead.
func (*TriggerInterval) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{19}
}

func (x *TriggerInterval) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

type TriggerPileThreshold struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PileId          string                 `protobuf:"bytes,1,opt,name=pile_id,json=pileId,proto3" json:"pile_id,omitempty"`                                   // ID of the pile to monitor
	Comparison      COMPARISON             `protobuf:"varint,2,opt,name=comparison,proto3,enum=hometasker.v1.COMPARISON" json:"comparison,omitempty"`          // Comparison to perform on the pile value
	Threshold       int32                  `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`                                          // Threshold value to trigger the task
	IncludeSubpiles *bool                  `protobuf:"varint,4,opt,name=include_subpiles,json=includeSubpiles,proto3,oneof" json:"include_subpiles,omitempty"` // If true, the condition will consider subpiles as well
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TriggerPileThreshold) Reset() {
	*x = TriggerPileThreshold{}
	mi := &file_tasks_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerPileThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerPileThreshold) ProtoMessage() {}

func (x *TriggerPileThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerPileThreshold.ProtoReflect.Descriptor instead.
func (*TriggerPileThreshold) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{20}
}

func (x *TriggerPileThreshold) GetPileId() string {
	if x != nil {
		return x.PileId
	}
	return ""
}

func (x *TriggerPileThreshold) GetComparison() COMPARISON {
	if x != nil {
		return x.Comparison
	}
	return COMPARISON_COMPARISON_UNSPECIFIED
}

func (x *TriggerPileThreshold) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *TriggerPileThreshold) GetIncludeSubpiles() bool {
	if x != nil && x.IncludeSubpiles != nil {
		return *x.IncludeSubpiles
	}
	return false
}

// Slot for a user in a pool from which users can be selected
type UserSlot struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Enforces a priority to ranked decisions e.g. for reviewer pools
	// assumed 1 if not present
	Priority *int32 `protobuf:"varint,2,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	// Describes the user's capacity or expertise (a total weight may be required to form a group of workers)
	// assumed 1 if not present
	Weight        *int32 `protobuf:"varint,3,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserSlot) Reset() {
	*x = UserSlot{}
	mi := &file_tasks_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSlot) ProtoMessage() {}

func (x *UserSlot) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSlot.ProtoReflect.Descriptor instead.
func (*UserSlot) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{21}
}

func (x *UserSlot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserSlot) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *UserSlot) GetWeight() int32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

type TaskSystem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName   string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	AssigneePool  []*UserSlot            `protobuf:"bytes,3,rep,name=assignee_pool,json=assigneePool,proto3" json:"assignee_pool,omitempty"`
	ReviewerPool  []*UserSlot            `protobuf:"bytes,4,rep,name=reviewer_pool,json=reviewerPool,proto3" json:"reviewer_pool,omitempty"`
	Pipelines     []*Pipeline            `protobuf:"bytes,5,rep,name=pipelines,proto3" json:"pipelines,omitempty"` // Pipelines that will fire tasks in this system (using the assignees and reviewers affiliated)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskSystem) Reset() {
	*x = TaskSystem{}
	mi := &file_tasks_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSystem) ProtoMessage() {}

func (x *TaskSystem) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSystem.ProtoReflect.Descriptor instead.
func (*TaskSystem) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{22}
}

func (x *TaskSystem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskSystem) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *TaskSystem) GetAssigneePool() []*UserSlot {
	if x != nil {
		return x.AssigneePool
	}
	return nil
}

func (x *TaskSystem) GetReviewerPool() []*UserSlot {
	if x != nil {
		return x.ReviewerPool
	}
	return nil
}

func (x *TaskSystem) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

// TaskRecords have no (foreignkey-esque) id because they must be hierarchical and are not meant to be referenced directly.
// they get generated UUIDs if they need referencing
type TaskRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        TASK_STATUS            `protobuf:"varint,1,opt,name=status,proto3,enum=hometasker.v1.TASK_STATUS" json:"status,omitempty"` // Status of the task
	TaskId        string                 `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                   // ID of the task this record documents an instance of completion of/progress towards
	Assignee      []string               `protobuf:"bytes,3,rep,name=assignee,proto3" json:"assignee,omitempty"`
	Reviewer      []string               `protobuf:"bytes,4,rep,name=reviewer,proto3" json:"reviewer,omitempty"`
	AssignedAt    int64                  `protobuf:"varint,5,opt,name=assigned_at,json=assignedAt,proto3" json:"assigned_at,omitempty"`
	CompletedAt   int64                  `protobuf:"varint,6,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	DueAt         *int64                 `protobuf:"varint,7,opt,name=due_at,json=dueAt,proto3,oneof" json:"due_at,omitempty"`                // Due date for task completion, if applicable
	ReviewedAt    *int64                 `protobuf:"varint,8,opt,name=reviewed_at,json=reviewedAt,proto3,oneof" json:"reviewed_at,omitempty"` // if not present, review is not required (referencable with TASK_STATUS)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRecord) Reset() {
	*x = TaskRecord{}
	mi := &file_tasks_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRecord) ProtoMessage() {}

func (x *TaskRecord) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRecord.ProtoReflect.Descriptor instead.
func (*TaskRecord) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{23}
}

func (x *TaskRecord) GetStatus() TASK_STATUS {
	if x != nil {
		return x.Status
	}
	return TASK_STATUS_PENDING
}

func (x *TaskRecord) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskRecord) GetAssignee() []string {
	if x != nil {
		return x.Assignee
	}
	return nil
}

func (x *TaskRecord) GetReviewer() []string {
	if x != nil {
		return x.Reviewer
	}
	return nil
}

func (x *TaskRecord) GetAssignedAt() int64 {
	if x != nil {
		return x.AssignedAt
	}
	return 0
}

func (x *TaskRecord) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *TaskRecord) GetDueAt() int64 {
	if x != nil && x.DueAt != nil {
		return *x.DueAt
	}
	return 0
}

func (x *TaskRecord) GetReviewedAt() int64 {
	if x != nil && x.ReviewedAt != nil {
		return *x.ReviewedAt
	}
	return 0
}

var File_tasks_proto protoreflect.FileDescriptor

const file_tasks_proto_rawDesc = "" +
	"\n" +
	"\vtasks.proto\x12\rhometasker.v1\x1a\x1egoogle/protobuf/duration.proto\"\x10\n" +
	"\x0eMealPlanAction\"P\n" +
	"\x06Action\x12<\n" +
	"\tmeal_plan\x18\x01 \x01(\v2\x1d.hometasker.v1.MealPlanActionH\x00R\bmealPlanB\b\n" +
	"\x06action\"\xb8\x01\n" +
	"\x10ModifyPileResult\x12\x17\n" +
	"\apile_id\x18\x01 \x01(\tR\x06pileId\x120\n" +
	"\aoperand\x18\x02 \x01(\x0e2\x16.hometasker.v1.OperandR\aoperand\x12\x14\n" +
	"\x05value\x18\x03 \x01(\x05R\x05value\x12.\n" +
	"\x10include_subpiles\x18\x04 \x01(\bH\x00R\x0fincludeSubpiles\x88\x01\x01B\x13\n" +
	"\x11_include_subpiles\"V\n" +
	"\x06Result\x12B\n" +
	"\vmodify_pile\x18\x01 \x01(\v2\x1f.hometasker.v1.ModifyPileResultH\x00R\n" +
	"modifyPileB\b\n" +
	"\x06result\"\xe8\x01\n" +
	"\x04Task\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayName\x12/\n" +
	"\x13display_description\x18\x03 \x01(\tR\x12displayDescription\x122\n" +
	"\x06action\x18\x04 \x01(\v2\x15.hometasker.v1.ActionH\x00R\x06action\x88\x01\x01\x122\n" +
	"\x06result\x18\x05 \x01(\v2\x15.hometasker.v1.ResultH\x01R\x06result\x88\x01\x01B\t\n" +
	"\a_actionB\t\n" +
	"\a_result\"\x1d\n" +
	"\x1bNewAssigneeOrSameAsPrevious\"\r\n" +
	"\vNewAssignee\"7\n" +
	"\x0eGroupAssignees\x12%\n" +
	"\x0etotal_capacity\x18\x01 \x01(\x05R\rtotalCapacity\"\x9e\x02\n" +
	"\x0eTaskAssignment\x12s\n" +
	" new_assignee_or_same_as_previous\x18\x01 \x01(\v2*.hometasker.v1.NewAssigneeOrSameAsPreviousH\x00R\x1bnewAssigneeOrSameAsPrevious\x12?\n" +
	"\fnew_assignee\x18\x02 \x01(\v2\x1a.hometasker.v1.NewAssigneeH\x00R\vnewAssignee\x12H\n" +
	"\x0fgroup_assignees\x18\x03 \x01(\v2\x1d.hometasker.v1.GroupAssigneesH\x00R\x0egroupAssigneesB\f\n" +
	"\n" +
	"assignment\"\xc6\x02\n" +
	"\bTaskStep\x12'\n" +
	"\x04task\x18\x01 \x01(\v2\x13.hometasker.v1.TaskR\x04task\x12N\n" +
	"\x13assignment_behavior\x18\x02 \x01(\v2\x1d.hometasker.v1.TaskAssignmentR\x12assignmentBehavior\x12%\n" +
	"\x0erequire_review\x18\x03 \x01(\bR\rrequireReview\x12?\n" +
	"\vstart_delay\x18\x04 \x01(\v2\x19.google.protobuf.DurationH\x00R\n" +
	"startDelay\x88\x01\x01\x12;\n" +
	"\tend_delay\x18\x05 \x01(\v2\x19.google.protobuf.DurationH\x01R\bendDelay\x88\x01\x01B\x0e\n" +
	"\f_start_delayB\f\n" +
	"\n" +
	"_end_delay\"\x17\n" +
	"\x15ConflictPolicySurpass\"\x15\n" +
	"\x13ConflictPolicyStack\"M\n" +
	"\x17ConflictPolicyAggregate\x122\n" +
	"\x15max_transmission_unit\x18\x01 \x01(\x05R\x13maxTransmissionUnit\"\x17\n" +
	"\x15ConflictPolicyReplace\"\x15\n" +
	"\x13ConflictPolicyBlock\"\xdc\x02\n" +
	"\x0eConflictPolicy\x12F\n" +
	"\taggregate\x18\x01 \x01(\v2&.hometasker.v1.ConflictPolicyAggregateH\x00R\taggregate\x12:\n" +
	"\x05stack\x18\x02 \x01(\v2\".hometasker.v1.ConflictPolicyStackH\x00R\x05stack\x12>\n" +
	"\asurpass\x18\x03 \x01(\v2\".hometasker.v1.ConflictPolicyStackH\x00R\asurpass\x12:\n" +
	"\x05block\x18\x04 \x01(\v2\".hometasker.v1.ConflictPolicyBlockH\x00R\x05block\x12@\n" +
	"\areplace\x18\x05 \x01(\v2$.hometasker.v1.ConflictPolicyReplaceH\x00R\areplaceB\b\n" +
	"\x06policy\"\xe0\x01\n" +
	"\bPipeline\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x124\n" +
	"\tcondition\x18\x02 \x03(\v2\x16.hometasker.v1.TriggerR\tcondition\x12-\n" +
	"\x05steps\x18\x03 \x03(\v2\x17.hometasker.v1.TaskStepR\x05steps\x12K\n" +
	"\x0fconflict_policy\x18\x04 \x01(\v2\x1d.hometasker.v1.ConflictPolicyH\x00R\x0econflictPolicy\x88\x01\x01B\x12\n" +
	"\x10_conflict_policy\"\xf3\x01\n" +
	"\aTrigger\x12O\n" +
	"\x0fweekly_schedule\x18\x01 \x01(\v2$.hometasker.v1.TriggerWeeklyScheduleH\x00R\x0eweeklySchedule\x12<\n" +
	"\binterval\x18\x02 \x01(\v2\x1e.hometasker.v1.TriggerIntervalH\x00R\binterval\x12L\n" +
	"\x0epile_threshold\x18\x03 \x01(\v2#.hometasker.v1.TriggerPileThresholdH\x00R\rpileThresholdB\v\n" +
	"\tcondition\"\x88\x02\n" +
	"\x15TriggerWeeklySchedule\x12:\n" +
	"\x03day\x18\x01 \x01(\x0e2(.hometasker.v1.TriggerWeeklySchedule.DayR\x03day\x124\n" +
	"\x16seconds_since_midnight\x18\x02 \x01(\x05R\x14secondsSinceMidnight\"}\n" +
	"\x03Day\x12\x0e\n" +
	"\n" +
	"DAY_MONDAY\x10\x00\x12\x0f\n" +
	"\vDAY_TUESDAY\x10\x01\x12\x11\n" +
	"\rDAY_WEDNESDAY\x10\x02\x12\x10\n" +
	"\fDAY_THURSDAY\x10\x03\x12\x0e\n" +
	"\n" +
	"DAY_FRIDAY\x10\x04\x12\x10\n" +
	"\fDAY_SATURDAY\x10\x05\x12\x0e\n" +
	"\n" +
	"DAY_SUNDAY\x10\x06\"H\n" +
	"\x0fTriggerInterval\x125\n" +
	"\binterval\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\binterval\"\xcd\x01\n" +
	"\x14TriggerPileThreshold\x12\x17\n" +
	"\apile_id\x18\x01 \x01(\tR\x06pileId\x129\n" +
	"\n" +
	"comparison\x18\x02 \x01(\x0e2\x19.hometasker.v1.COMPARISONR\n" +
	"comparison\x12\x1c\n" +
	"\tthreshold\x18\x03 \x01(\x05R\tthreshold\x12.\n" +
	"\x10include_subpiles\x18\x04 \x01(\bH\x00R\x0fincludeSubpiles\x88\x01\x01B\x13\n" +
	"\x11_include_subpiles\"p\n" +
	"\bUserSlot\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1f\n" +
	"\bpriority\x18\x02 \x01(\x05H\x00R\bpriority\x88\x01\x01\x12\x1b\n" +
	"\x06weight\x18\x03 \x01(\x05H\x01R\x06weight\x88\x01\x01B\v\n" +
	"\t_priorityB\t\n" +
	"\a_weight\"\xf2\x01\n" +
	"\n" +
	"TaskSystem\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayName\x12<\n" +
	"\rassignee_pool\x18\x03 \x03(\v2\x17.hometasker.v1.UserSlotR\fassigneePool\x12<\n" +
	"\rreviewer_pool\x18\x04 \x03(\v2\x17.hometasker.v1.UserSlotR\freviewerPool\x125\n" +
	"\tpipelines\x18\x05 \x03(\v2\x17.hometasker.v1.PipelineR\tpipelines\"\xb2\x02\n" +
	"\n" +
	"TaskRecord\x122\n" +
	"\x06status\x18\x01 \x01(\x0e2\x1a.hometasker.v1.TASK_STATUSR\x06status\x12\x17\n" +
	"\atask_id\x18\x02 \x01(\tR\x06taskId\x12\x1a\n" +
	"\bassignee\x18\x03 \x03(\tR\bassignee\x12\x1a\n" +
	"\breviewer\x18\x04 \x03(\tR\breviewer\x12\x1f\n" +
	"\vassigned_at\x18\x05 \x01(\x03R\n" +
	"assignedAt\x12!\n" +
	"\fcompleted_at\x18\x06 \x01(\x03R\vcompletedAt\x12\x1a\n" +
	"\x06due_at\x18\a \x01(\x03H\x00R\x05dueAt\x88\x01\x01\x12$\n" +
	"\vreviewed_at\x18\b \x01(\x03H\x01R\n" +
	"reviewedAt\x88\x01\x01B\t\n" +
	"\a_due_atB\x0e\n" +
	"\f_reviewed_at*U\n" +
	"\n" +
	"COMPARISON\x12\x1a\n" +
	"\x16COMPARISON_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tLESS_THAN\x10\x01\x12\x10\n" +
	"\fGREATER_THAN\x10\x02\x12\n" +
	"\n" +
	"\x06EQUALS\x10\x03*\x84\x01\n" +
	"\aOperand\x12\x17\n" +
	"\x13OPERAND_UNSPECIFIED\x10\x00\x12\x0f\n" +
	"\vOPERAND_ADD\x10\x01\x12\x14\n" +
	"\x10OPERAND_SUBTRACT\x10\x02\x12\x12\n" +
	"\x0eOPERAND_DIVIDE\x10\x03\x12\x14\n" +
	"\x10OPERAND_MULTIPLY\x10\x04\x12\x0f\n" +
	"\vOPERAND_SET\x10\x05*K\n" +
	"\vTASK_STATUS\x12\v\n" +
	"\aPENDING\x10\x00\x12\f\n" +
	"\bASSIGNED\x10\x01\x12\x13\n" +
	"\x0fREVIEW_ASSIGNED\x10\x02\x12\f\n" +
	"\bCOMPLETE\x10\x03B\x0fZ\rhometasker/v1b\x06proto3"

var (
	file_tasks_proto_rawDescOnce sync.Once
	file_tasks_proto_rawDescData []byte
)

func file_tasks_proto_rawDescGZIP() []byte {
	file_tasks_proto_rawDescOnce.Do(func() {
		file_tasks_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tasks_proto_rawDesc), len(file_tasks_proto_rawDesc)))
	})
	return file_tasks_proto_rawDescData
}

var file_tasks_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_tasks_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_tasks_proto_goTypes = []any{
	(COMPARISON)(0),                     // 0: hometasker.v1.COMPARISON
	(Operand)(0),                        // 1: hometasker.v1.Operand
	(TASK_STATUS)(0),                    // 2: hometasker.v1.TASK_STATUS
	(TriggerWeeklySchedule_Day)(0),      // 3: hometasker.v1.TriggerWeeklySchedule.Day
	(*MealPlanAction)(nil),              // 4: hometasker.v1.MealPlanAction
	(*Action)(nil),                      // 5: hometasker.v1.Action
	(*ModifyPileResult)(nil),            // 6: hometasker.v1.ModifyPileResult
	(*Result)(nil),                      // 7: hometasker.v1.Result
	(*Task)(nil),                        // 8: hometasker.v1.Task
	(*NewAssigneeOrSameAsPrevious)(nil), // 9: hometasker.v1.NewAssigneeOrSameAsPrevious
	(*NewAssignee)(nil),                 // 10: hometasker.v1.NewAssignee
	(*GroupAssignees)(nil),              // 11: hometasker.v1.GroupAssignees
	(*TaskAssignment)(nil),              // 12: hometasker.v1.TaskAssignment
	(*TaskStep)(nil),                    // 13: hometasker.v1.TaskStep
	(*ConflictPolicySurpass)(nil),       // 14: hometasker.v1.ConflictPolicySurpass
	(*ConflictPolicyStack)(nil),         // 15: hometasker.v1.ConflictPolicyStack
	(*ConflictPolicyAggregate)(nil),     // 16: hometasker.v1.ConflictPolicyAggregate
	(*ConflictPolicyReplace)(nil),       // 17: hometasker.v1.ConflictPolicyReplace
	(*ConflictPolicyBlock)(nil),         // 18: hometasker.v1.ConflictPolicyBlock
	(*ConflictPolicy)(nil),              // 19: hometasker.v1.ConflictPolicy
	(*Pipeline)(nil),                    // 20: hometasker.v1.Pipeline
	(*Trigger)(nil),                     // 21: hometasker.v1.Trigger
	(*TriggerWeeklySchedule)(nil),       // 22: hometasker.v1.TriggerWeeklySchedule
	(*TriggerInterval)(nil),             // 23: hometasker.v1.TriggerInterval
	(*TriggerPileThreshold)(nil),        // 24: hometasker.v1.TriggerPileThreshold
	(*UserSlot)(nil),                    // 25: hometasker.v1.UserSlot
	(*TaskSystem)(nil),                  // 26: hometasker.v1.TaskSystem
	(*TaskRecord)(nil),                  // 27: hometasker.v1.TaskRecord
	(*durationpb.Duration)(nil),         // 28: google.protobuf.Duration
}
var file_tasks_proto_depIdxs = []int32{
	4,  // 0: hometasker.v1.Action.meal_plan:type_name -> hometasker.v1.MealPlanAction
	1,  // 1: hometasker.v1.ModifyPileResult.operand:type_name -> hometasker.v1.Operand
	6,  // 2: hometasker.v1.Result.modify_pile:type_name -> hometasker.v1.ModifyPileResult
	5,  // 3: hometasker.v1.Task.action:type_name -> hometasker.v1.Action
	7,  // 4: hometasker.v1.Task.result:type_name -> hometasker.v1.Result
	9,  // 5: hometasker.v1.TaskAssignment.new_assignee_or_same_as_previous:type_name -> hometasker.v1.NewAssigneeOrSameAsPrevious
	10, // 6: hometasker.v1.TaskAssignment.new_assignee:type_name -> hometasker.v1.NewAssignee
	11, // 7: hometasker.v1.TaskAssignment.group_assignees:type_name -> hometasker.v1.GroupAssignees
	8,  // 8: hometasker.v1.TaskStep.task:type_name -> hometasker.v1.Task
	12, // 9: hometasker.v1.TaskStep.assignment_behavior:type_name -> hometasker.v1.TaskAssignment
	28, // 10: hometasker.v1.TaskStep.start_delay:type_name -> google.protobuf.Duration
	28, // 11: hometasker.v1.TaskStep.end_delay:type_name -> google.protobuf.Duration
	16, // 12: hometasker.v1.ConflictPolicy.aggregate:type_name -> hometasker.v1.ConflictPolicyAggregate
	15, // 13: hometasker.v1.ConflictPolicy.stack:type_name -> hometasker.v1.ConflictPolicyStack
	15, // 14: hometasker.v1.ConflictPolicy.surpass:type_name -> hometasker.v1.ConflictPolicyStack
	18, // 15: hometasker.v1.ConflictPolicy.block:type_name -> hometasker.v1.ConflictPolicyBlock
	17, // 16: hometasker.v1.ConflictPolicy.replace:type_name -> hometasker.v1.ConflictPolicyReplace
	21, // 17: hometasker.v1.Pipeline.condition:type_name -> hometasker.v1.Trigger
	13, // 18: hometasker.v1.Pipeline.steps:type_name -> hometasker.v1.TaskStep
	19, // 19: hometasker.v1.Pipeline.conflict_policy:type_name -> hometasker.v1.ConflictPolicy
	22, // 20: hometasker.v1.Trigger.weekly_schedule:type_name -> hometasker.v1.TriggerWeeklySchedule
	23, // 21: hometasker.v1.Trigger.interval:type_name -> hometasker.v1.TriggerInterval
	24, // 22: hometasker.v1.Trigger.pile_threshold:type_name -> hometasker.v1.TriggerPileThreshold
	3,  // 23: hometasker.v1.TriggerWeeklySchedule.day:type_name -> hometasker.v1.TriggerWeeklySchedule.Day
	28, // 24: hometasker.v1.TriggerInterval.interval:type_name -> google.protobuf.Duration
	0,  // 25: hometasker.v1.TriggerPileThreshold.comparison:type_name -> hometasker.v1.COMPARISON
	25, // 26: hometasker.v1.TaskSystem.assignee_pool:type_name -> hometasker.v1.UserSlot
	25, // 27: hometasker.v1.TaskSystem.reviewer_pool:type_name -> hometasker.v1.UserSlot
	20, // 28: hometasker.v1.TaskSystem.pipelines:type_name -> hometasker.v1.Pipeline
	2,  // 29: hometasker.v1.TaskRecord.status:type_name -> hometasker.v1.TASK_STATUS
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_tasks_proto_init() }
func file_tasks_proto_init() {
	if File_tasks_proto != nil {
		return
	}
	file_tasks_proto_msgTypes[1].OneofWrappers = []any{
		(*Action_MealPlan)(nil),
	}
	file_tasks_proto_msgTypes[2].OneofWrappers = []any{}
	file_tasks_proto_msgTypes[3].OneofWrappers = []any{
		(*Result_ModifyPile)(nil),
	}
	file_tasks_proto_msgTypes[4].OneofWrappers = []any{}
	file_tasks_proto_msgTypes[8].OneofWrappers = []any{
		(*TaskAssignment_NewAssigneeOrSameAsPrevious)(nil),
		(*TaskAssignment_NewAssignee)(nil),
		(*TaskAssignment_GroupAssignees)(nil),
	}
	file_tasks_proto_msgTypes[9].OneofWrappers = []any{}
	file_tasks_proto_msgTypes[15].OneofWrappers = []any{
		(*ConflictPolicy_Aggregate)(nil),
		(*ConflictPolicy_Stack)(nil),
		(*ConflictPolicy_Surpass)(nil),
		(*ConflictPolicy_Block)(nil),
		(*ConflictPolicy_Replace)(nil),
	}
	file_tasks_proto_msgTypes[16].OneofWrappers = []any{}
	file_tasks_proto_msgTypes[17].OneofWrappers = []any{
		(*Trigger_WeeklySchedule)(nil),
		(*Trigger_Interval)(nil),
		(*Trigger_PileThreshold)(nil),
	}
	file_tasks_proto_msgTypes[20].OneofWrappers = []any{}
	file_tasks_proto_msgTypes[21].OneofWrappers = []any{}
	file_tasks_proto_msgTypes[23].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tasks_proto_rawDesc), len(file_tasks_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tasks_proto_goTypes,
		DependencyIndexes: file_tasks_proto_depIdxs,
		EnumInfos:         file_tasks_proto_enumTypes,
		MessageInfos:      file_tasks_proto_msgTypes,
	}.Build()
	File_tasks_proto = out.File
	file_tasks_proto_goTypes = nil
	file_tasks_proto_depIdxs = nil
}
