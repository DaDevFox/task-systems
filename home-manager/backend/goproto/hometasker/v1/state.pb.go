// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: state.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// represents work items within a pipeline
type PipelineWork struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Points             int32                  `protobuf:"varint,1,opt,name=points,proto3" json:"points,omitempty"`
	StepIdx            uint32                 `protobuf:"varint,2,opt,name=step_idx,json=stepIdx,proto3" json:"step_idx,omitempty"`                                      // index in the pipeline of the step that is being worked on
	ArrivalOnStepSeqno uint32                 `protobuf:"varint,3,opt,name=arrival_on_step_seqno,json=arrivalOnStepSeqno,proto3" json:"arrival_on_step_seqno,omitempty"` // incrementor that is higher for tasks which arrived on this step later
	Task               *TaskRecord            `protobuf:"bytes,4,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PipelineWork) Reset() {
	*x = PipelineWork{}
	mi := &file_state_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineWork) ProtoMessage() {}

func (x *PipelineWork) ProtoReflect() protoreflect.Message {
	mi := &file_state_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineWork.ProtoReflect.Descriptor instead.
func (*PipelineWork) Descriptor() ([]byte, []int) {
	return file_state_proto_rawDescGZIP(), []int{0}
}

func (x *PipelineWork) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *PipelineWork) GetStepIdx() uint32 {
	if x != nil {
		return x.StepIdx
	}
	return 0
}

func (x *PipelineWork) GetArrivalOnStepSeqno() uint32 {
	if x != nil {
		return x.ArrivalOnStepSeqno
	}
	return 0
}

func (x *PipelineWork) GetTask() *TaskRecord {
	if x != nil {
		return x.Task
	}
	return nil
}

// represents pipelines within a task system
type PipelineActivity struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	TaskSystemId         string                 `protobuf:"bytes,1,opt,name=task_system_id,json=taskSystemId,proto3" json:"task_system_id,omitempty"`                          // the id of the task system this pipeline belongs to
	PipelineId           string                 `protobuf:"bytes,2,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`                                  // id of the target pipeline
	PipelineWork         []*PipelineWork        `protobuf:"bytes,3,rep,name=pipeline_work,json=pipelineWork,proto3" json:"pipeline_work,omitempty"`                            // the work being done in the pipeline, one for each step that is being worked on
	AttemptedNewEntrants int32                  `protobuf:"varint,4,opt,name=attempted_new_entrants,json=attemptedNewEntrants,proto3" json:"attempted_new_entrants,omitempty"` // METRIC: number of new tasks that were attempted to be added to the pipeline, but blocked by the pipeline's conflict policy (BLOCK or REPLACE)
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PipelineActivity) Reset() {
	*x = PipelineActivity{}
	mi := &file_state_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineActivity) ProtoMessage() {}

func (x *PipelineActivity) ProtoReflect() protoreflect.Message {
	mi := &file_state_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineActivity.ProtoReflect.Descriptor instead.
func (*PipelineActivity) Descriptor() ([]byte, []int) {
	return file_state_proto_rawDescGZIP(), []int{1}
}

func (x *PipelineActivity) GetTaskSystemId() string {
	if x != nil {
		return x.TaskSystemId
	}
	return ""
}

func (x *PipelineActivity) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *PipelineActivity) GetPipelineWork() []*PipelineWork {
	if x != nil {
		return x.PipelineWork
	}
	return nil
}

func (x *PipelineActivity) GetAttemptedNewEntrants() int32 {
	if x != nil {
		return x.AttemptedNewEntrants
	}
	return 0
}

type Pile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName   string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Value         int32                  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	MaxValue      int32                  `protobuf:"varint,4,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	Subpiles      []*Pile                `protobuf:"bytes,5,rep,name=subpiles,proto3" json:"subpiles,omitempty"` // nested piles
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pile) Reset() {
	*x = Pile{}
	mi := &file_state_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pile) ProtoMessage() {}

func (x *Pile) ProtoReflect() protoreflect.Message {
	mi := &file_state_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pile.ProtoReflect.Descriptor instead.
func (*Pile) Descriptor() ([]byte, []int) {
	return file_state_proto_rawDescGZIP(), []int{2}
}

func (x *Pile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Pile) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Pile) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Pile) GetMaxValue() int32 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *Pile) GetSubpiles() []*Pile {
	if x != nil {
		return x.Subpiles
	}
	return nil
}

type SystemState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// each trigger gets one task being worked on at a time
	PipelineActivity []*PipelineActivity `protobuf:"bytes,1,rep,name=pipeline_activity,json=pipelineActivity,proto3" json:"pipeline_activity,omitempty"`
	Piles            []*Pile             `protobuf:"bytes,2,rep,name=piles,proto3" json:"piles,omitempty"`
	MealPlans        []*MealPlan         `protobuf:"bytes,3,rep,name=meal_plans,json=mealPlans,proto3" json:"meal_plans,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SystemState) Reset() {
	*x = SystemState{}
	mi := &file_state_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemState) ProtoMessage() {}

func (x *SystemState) ProtoReflect() protoreflect.Message {
	mi := &file_state_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemState.ProtoReflect.Descriptor instead.
func (*SystemState) Descriptor() ([]byte, []int) {
	return file_state_proto_rawDescGZIP(), []int{3}
}

func (x *SystemState) GetPipelineActivity() []*PipelineActivity {
	if x != nil {
		return x.PipelineActivity
	}
	return nil
}

func (x *SystemState) GetPiles() []*Pile {
	if x != nil {
		return x.Piles
	}
	return nil
}

func (x *SystemState) GetMealPlans() []*MealPlan {
	if x != nil {
		return x.MealPlans
	}
	return nil
}

var File_state_proto protoreflect.FileDescriptor

const file_state_proto_rawDesc = "" +
	"\n" +
	"\vstate.proto\x12\rhometasker.v1\x1a\rcooking.proto\x1a\vtasks.proto\"\xa3\x01\n" +
	"\fPipelineWork\x12\x16\n" +
	"\x06points\x18\x01 \x01(\x05R\x06points\x12\x19\n" +
	"\bstep_idx\x18\x02 \x01(\rR\astepIdx\x121\n" +
	"\x15arrival_on_step_seqno\x18\x03 \x01(\rR\x12arrivalOnStepSeqno\x12-\n" +
	"\x04task\x18\x04 \x01(\v2\x19.hometasker.v1.TaskRecordR\x04task\"\xd1\x01\n" +
	"\x10PipelineActivity\x12$\n" +
	"\x0etask_system_id\x18\x01 \x01(\tR\ftaskSystemId\x12\x1f\n" +
	"\vpipeline_id\x18\x02 \x01(\tR\n" +
	"pipelineId\x12@\n" +
	"\rpipeline_work\x18\x03 \x03(\v2\x1b.hometasker.v1.PipelineWorkR\fpipelineWork\x124\n" +
	"\x16attempted_new_entrants\x18\x04 \x01(\x05R\x14attemptedNewEntrants\"\x9d\x01\n" +
	"\x04Pile\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayName\x12\x14\n" +
	"\x05value\x18\x03 \x01(\x05R\x05value\x12\x1b\n" +
	"\tmax_value\x18\x04 \x01(\x05R\bmaxValue\x12/\n" +
	"\bsubpiles\x18\x05 \x03(\v2\x13.hometasker.v1.PileR\bsubpiles\"\xbe\x01\n" +
	"\vSystemState\x12L\n" +
	"\x11pipeline_activity\x18\x01 \x03(\v2\x1f.hometasker.v1.PipelineActivityR\x10pipelineActivity\x12)\n" +
	"\x05piles\x18\x02 \x03(\v2\x13.hometasker.v1.PileR\x05piles\x126\n" +
	"\n" +
	"meal_plans\x18\x03 \x03(\v2\x17.hometasker.v1.MealPlanR\tmealPlansB\x0fZ\rhometasker/v1b\x06proto3"

var (
	file_state_proto_rawDescOnce sync.Once
	file_state_proto_rawDescData []byte
)

func file_state_proto_rawDescGZIP() []byte {
	file_state_proto_rawDescOnce.Do(func() {
		file_state_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_state_proto_rawDesc), len(file_state_proto_rawDesc)))
	})
	return file_state_proto_rawDescData
}

var file_state_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_state_proto_goTypes = []any{
	(*PipelineWork)(nil),     // 0: hometasker.v1.PipelineWork
	(*PipelineActivity)(nil), // 1: hometasker.v1.PipelineActivity
	(*Pile)(nil),             // 2: hometasker.v1.Pile
	(*SystemState)(nil),      // 3: hometasker.v1.SystemState
	(*TaskRecord)(nil),       // 4: hometasker.v1.TaskRecord
	(*MealPlan)(nil),         // 5: hometasker.v1.MealPlan
}
var file_state_proto_depIdxs = []int32{
	4, // 0: hometasker.v1.PipelineWork.task:type_name -> hometasker.v1.TaskRecord
	0, // 1: hometasker.v1.PipelineActivity.pipeline_work:type_name -> hometasker.v1.PipelineWork
	2, // 2: hometasker.v1.Pile.subpiles:type_name -> hometasker.v1.Pile
	1, // 3: hometasker.v1.SystemState.pipeline_activity:type_name -> hometasker.v1.PipelineActivity
	2, // 4: hometasker.v1.SystemState.piles:type_name -> hometasker.v1.Pile
	5, // 5: hometasker.v1.SystemState.meal_plans:type_name -> hometasker.v1.MealPlan
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_state_proto_init() }
func file_state_proto_init() {
	if File_state_proto != nil {
		return
	}
	file_cooking_proto_init()
	file_tasks_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_state_proto_rawDesc), len(file_state_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_state_proto_goTypes,
		DependencyIndexes: file_state_proto_depIdxs,
		MessageInfos:      file_state_proto_msgTypes,
	}.Build()
	File_state_proto = out.File
	file_state_proto_goTypes = nil
	file_state_proto_depIdxs = nil
}
