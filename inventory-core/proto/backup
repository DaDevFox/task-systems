syntax = "proto3";

package inventory.v1;

option go_package = "github.com/DaDevFox/task-systems/inventory-core/proto/inventory/v1";

import "google/protobuf/timestamp.proto";

//========================================
// ENUM DEFINITIONS  
//========================================

// UnitType defines the type of measurement unit
enum UnitType
{
    UNIT_TYPE_UNSPECIFIED = 0;
    UNIT_TYPE_WEIGHT = 1;      // kg, lbs, grams, etc.
    UNIT_TYPE_VOLUME = 2;      // liters, cups, gallons, etc.
    UNIT_TYPE_COUNT = 3;       // items, pieces, etc.
    UNIT_TYPE_LENGTH = 4;      // meters, feet, inches, etc.
    UNIT_TYPE_AREA = 5;        // square meters, acres, etc.
}

// ConsumptionPattern defines how an item is typically consumed
enum ConsumptionPattern
{
    CONSUMPTION_PATTERN_UNSPECIFIED = 0;
    CONSUMPTION_PATTERN_LINEAR = 1;        // Steady, consistent usage
    CONSUMPTION_PATTERN_SEASONAL = 2;      // Varies by season/time of year
    CONSUMPTION_PATTERN_BATCH = 3;         // Used in large amounts at once
    CONSUMPTION_PATTERN_RANDOM = 4;        // Unpredictable usage
}

// TrainingStage defines the current training phase for prediction models
enum TrainingStage
{
    TRAINING_STAGE_UNSPECIFIED = 0;
    TRAINING_STAGE_COLLECTING = 1;         // Actively collecting training data
    TRAINING_STAGE_LEARNING = 2;           // Processing collected data
    TRAINING_STAGE_TRAINED = 3;            // Model is trained and active
    TRAINING_STAGE_RETRAINING = 4;         // Model being retrained with new data
}

// PredictionModel defines available prediction algorithms
enum PredictionModel
{
    PREDICTION_MODEL_UNSPECIFIED = 0;
    PREDICTION_MODEL_MARKOV = 1;           // Finite state consumption model
    PREDICTION_MODEL_CROSTON = 2;          // Intermittent demand forecasting
    PREDICTION_MODEL_DRIFT_IMPULSE = 3;    // Physical system with drift and impulses
    PREDICTION_MODEL_BAYESIAN = 4;         // Bayesian inference with confidence intervals
    PREDICTION_MODEL_MEMORY_WINDOW = 5;    // Memory-augmented rolling windows
    PREDICTION_MODEL_EVENT_TRIGGER = 6;    // Temporal event trigger modeling
}

//========================================
// CORE MESSAGE DEFINITIONS
//========================================

// Unit represents a measurement unit with conversion capabilities
message Unit
{
  string id = 1;                        // Unique unit identifier (e.g., "kg", "lbs")
  string name = 2;                      // Human-readable name (e.g., "Kilograms")
  string symbol = 3;                    // Display symbol (e.g., "kg")
    UnitType type = 4;                    // Type of measurement
  double base_conversion_factor = 5;    // Factor to convert to base unit of this type
  string base_unit_id = 6;             // ID of the base unit for this type
}

// ConsumptionBehavior defines how an item is consumed over time
message ConsumptionBehavior
{
    ConsumptionPattern pattern = 1;       // Type of consumption pattern
  double average_rate_per_day = 2;      // Average consumption per day
  double variance = 3;                  // Variance in consumption (for uncertainty)
    repeated double seasonal_factors = 4;  // Monthly multipliers (12 values, Jan-Dec)
    google.protobuf.Timestamp last_updated = 5;
}

// ConsumptionRecord tracks historical usage of an item
message ConsumptionRecord
{
    google.protobuf.Timestamp timestamp = 1;
  double amount_consumed = 2;
  string unit_id = 3;
  string reason = 4;                    // Optional: why item was consumed
}

// InventoryItem represents a single item in inventory
message InventoryItem
{
  string id = 1;                        // Unique identifier
  string name = 2;                      // Human-readable name
  string description = 3;               // Optional description
  double current_level = 4;             // Current quantity available
  double max_capacity = 5;              // Maximum storage capacity
  double low_stock_threshold = 6;       // Alert when below this level
  string unit_id = 7;                   // Primary unit for this item
    repeated string alternate_unit_ids = 8; // Other valid units for this item
    ConsumptionBehavior consumption_behavior = 9;
    repeated ConsumptionRecord consumption_history = 10;
    google.protobuf.Timestamp created_at = 11;
    google.protobuf.Timestamp updated_at = 12;
    map<string, string> metadata = 13;   // Custom key-value pairs
}

// InventoryStatus provides overview of inventory state
message InventoryStatus
{
    repeated InventoryItem items = 1;
    repeated InventoryItem low_stock_items = 2;
    repeated InventoryItem empty_items = 3;
    int32 total_items = 4;
    google.protobuf.Timestamp last_updated = 5;
}

// ConsumptionPrediction provides forecasted usage for an item
message ConsumptionPrediction
{
  string item_id = 1;
  double predicted_days_remaining = 2;  // How many days until empty
  double confidence_score = 3;          // 0.0 to 1.0, how confident we are
    google.protobuf.Timestamp predicted_empty_date = 4;
  double recommended_restock_level = 5; // Suggested amount to restock
  string prediction_model = 6;          // Which algorithm was used
  double estimate = 7;                  // Predicted level at target time
  double lower_bound = 8;               // Lower confidence bound
  double upper_bound = 9;               // Upper confidence bound
  string recommendation = 10;           // Human-readable recommendation
}

// PredictionTrainingStatus tracks training progress for prediction models
message PredictionTrainingStatus
{
  string item_id = 1;
    TrainingStage stage = 2;
    PredictionModel active_model = 3;
    repeated PredictionModel available_models = 4;
    int32 training_samples = 5;           // Number of data points collected
    int32 min_samples_required = 6;       // Minimum samples needed for training
  double training_accuracy = 7;         // Model accuracy (0.0 to 1.0)
    google.protobuf.Timestamp training_started = 8;
    google.protobuf.Timestamp last_updated = 9;
    map<string, double> model_parameters = 10; // Model-specific parameters
}

// InventoryReport represents a user report during training or operation
message InventoryReport
{
  string item_id = 1;
    google.protobuf.Timestamp timestamp = 2;
  double level = 3;
  string unit_id = 4;
  string context = 5;                   // Optional context (e.g., "after dinner", "weekend")
  bool is_training_data = 6;            // Whether this is for model training
    map<string, string> metadata = 7;    // Additional contextual information
  double estimate = 7;                  // Predicted level at target time
  double lower_bound = 8;               // Lower confidence bound
  double upper_bound = 9;               // Upper confidence bound
  string recommendation = 10;           // Human-readable recommendation
}

// PredictionTrainingStatus tracks training progress for prediction models
message PredictionTrainingStatus
{
  string item_id = 1;
    TrainingStage stage = 2;
    PredictionModel active_model = 3;
    repeated PredictionModel available_models = 4;
    int32 training_samples = 5;           // Number of data points collected
    int32 min_samples_required = 6;       // Minimum samples needed for training
  double training_accuracy = 7;         // Model accuracy (0.0 to 1.0)
    google.protobuf.Timestamp training_started = 8;
    google.protobuf.Timestamp last_updated = 9;
    map<string, double> model_parameters = 10; // Model-specific parameters
}

// PredictionModelFitness tracks historical performance of prediction models
message PredictionModelFitness
{
  string item_id = 1;
    PredictionModel model = 2;
  double current_fitness = 3;           // Current fitness score (0.0 to 1.0)
    int32 prediction_count = 4;           // Total predictions made
  double average_error = 5;             // Average prediction error
  double error_variance = 6;            // Variance in prediction errors
    google.protobuf.Timestamp last_updated = 7;
    repeated FitnessDataPoint fitness_history = 8; // Historical fitness data
}

// FitnessDataPoint represents a single fitness measurement
message FitnessDataPoint
{
    google.protobuf.Timestamp timestamp = 1;
  double actual_value = 2;              // Actual observed value
  double predicted_value = 3;           // Model's prediction
  double error = 4;                     // Absolute error
  double fitness_score = 5;             // Fitness at this point (0.0 to 1.0)
}

// PredictionConfig defines which models are enabled for an item
message PredictionConfig
{
  string item_id = 1;
    repeated PredictionModel enabled_models = 2;
    PredictionModel preferred_model = 3;   // Preferred model to use
  bool auto_select_best = 4;            // Whether to automatically select best performer
    map<string, string> global_settings = 5; // Global prediction settings
}

// InventoryReport represents a user report during training or operation
message InventoryReport
{
  string item_id = 1;
    google.protobuf.Timestamp timestamp = 2;
  double level = 3;
  string unit_id = 4;
  string context = 5;                   // Optional context (e.g., "after dinner", "weekend")
  bool is_training_data = 6;            // Whether this is for model training
    map<string, string> metadata = 7;    // Additional contextual information
}

//========================================
// REQUEST/RESPONSE MESSAGE DEFINITIONS
//========================================

// AddInventoryItemRequest creates a new inventory item
message AddInventoryItemRequest
{
  string name = 1;                      // Required: item name
  string description = 2;               // Optional: item description
  double initial_level = 3;             // Starting quantity
  double max_capacity = 4;              // Maximum storage capacity
  double low_stock_threshold = 5;       // Alert threshold
  string unit_id = 6;                   // Primary unit
    map<string, string> metadata = 7;    // Custom properties
}

message AddInventoryItemResponse
{
    InventoryItem item = 1;
}

// UpdateInventoryLevelRequest changes the quantity of an item
message UpdateInventoryLevelRequest
{
  string item_id = 1;                   // Required: item to update
  double new_level = 2;                 // New quantity level
  string reason = 3;                    // Optional: reason for change
  bool record_consumption = 4;          // Whether to record as consumption
}

message UpdateInventoryLevelResponse
{
    InventoryItem item = 1;
  bool level_changed = 2;
  bool below_threshold = 3;             // Whether item is now below threshold
}

// GetInventoryStatusRequest retrieves overall inventory state
message GetInventoryStatusRequest
{
  bool include_low_stock_only = 1;      // Filter to only low stock items
    repeated string item_ids = 2;         // Optional: filter to specific items
}

message GetInventoryStatusResponse
{
    InventoryStatus status = 1;
}

// PredictConsumptionRequest generates usage forecasts
message PredictConsumptionRequest
{
  string item_id = 1;                   // Required: item to predict
    int32 days_ahead = 2;                 // How many days to forecast (default: 30)
  bool update_behavior = 3;             // Whether to update consumption behavior
}

message PredictConsumptionResponse
{
    ConsumptionPrediction prediction = 1;
}

// SetConsumptionBehaviorRequest configures how an item is consumed
message SetConsumptionBehaviorRequest
{
  string item_id = 1;                   // Required: item to configure
    ConsumptionBehavior behavior = 2;     // Consumption behavior settings
}

message SetConsumptionBehaviorResponse
{
    InventoryItem item = 1;
}

// GetInventoryItemRequest retrieves a single item
message GetInventoryItemRequest
{
  string item_id = 1;                   // Required: item identifier
}

message GetInventoryItemResponse
{
    InventoryItem item = 1;
}

// ListInventoryItemsRequest retrieves filtered list of items
message ListInventoryItemsRequest
{
  bool low_stock_only = 1;              // Filter to low stock items
  string unit_type_filter = 2;          // Filter by unit type
    int32 limit = 3;                      // Maximum items to return
    int32 offset = 4;                     // Pagination offset
}

message ListInventoryItemsResponse
{
    repeated InventoryItem items = 1;
    int32 total_count = 2;                // Total items matching filter
}

// ConvertUnitsRequest converts quantities between units
message ConvertUnitsRequest
{
  double amount = 1;                    // Quantity to convert
  string from_unit_id = 2;              // Source unit
  string to_unit_id = 3;                // Target unit
}

message ConvertUnitsResponse
{
  double converted_amount = 1;          // Result of conversion
  bool conversion_possible = 2;         // Whether conversion was possible
  string error_message = 3;             // Error if conversion failed
}

// SubmitInventoryReportRequest submits a user report for training or updates
message SubmitInventoryReportRequest
{
    InventoryReport report = 1;           // Required: the inventory report
}

message SubmitInventoryReportResponse
{
  bool training_updated = 1;            // Whether training was affected
    PredictionTrainingStatus training_status = 2; // Current training status
}

// GetPredictionTrainingStatusRequest retrieves training status
message GetPredictionTrainingStatusRequest
{
  string item_id = 1;                   // Required: item identifier
}

message GetPredictionTrainingStatusResponse
{
    PredictionTrainingStatus status = 1;
}

// StartTrainingRequest begins training for an item with a specific model
message StartTrainingRequest
{
  string item_id = 1;                   // Required: item to train
    PredictionModel model = 2;            // Model to use for training
    int32 min_samples = 3;                // Minimum samples before training (default: 10)
    map<string, double> parameters = 4;   // Model-specific parameters
}

message StartTrainingResponse
{
    PredictionTrainingStatus status = 1;
}

// GetAdvancedPredictionRequest generates detailed predictions with multiple models
message GetAdvancedPredictionRequest
{
  string item_id = 1;                   // Required: item to predict
    google.protobuf.Timestamp target_time = 2; // When to predict for
    repeated PredictionModel models = 3;   // Models to use (empty = use best available)
  bool include_confidence_intervals = 4; // Whether to include bounds
}

message GetAdvancedPredictionResponse
{
    repeated ConsumptionPrediction predictions = 1; // One per model
    ConsumptionPrediction consensus_prediction = 2; // Ensemble prediction
}

// SubmitInventoryReportRequest submits a user report for training or updates
message SubmitInventoryReportRequest
{
    InventoryReport report = 1;           // Required: the inventory report
}

message SubmitInventoryReportResponse
{
  bool training_updated = 1;            // Whether training was affected
    PredictionTrainingStatus training_status = 2; // Current training status
}

// GetPredictionTrainingStatusRequest retrieves training status
message GetPredictionTrainingStatusRequest
{
  string item_id = 1;                   // Required: item identifier
}

message GetPredictionTrainingStatusResponse
{
    PredictionTrainingStatus status = 1;
}

// StartTrainingRequest begins training for an item with a specific model
message StartTrainingRequest
{
  string item_id = 1;                   // Required: item to train
    PredictionModel model = 2;            // Model to use for training
    int32 min_samples = 3;                // Minimum samples before training (default: 10)
    map<string, double> parameters = 4;   // Model-specific parameters
}

message StartTrainingResponse
{
    PredictionTrainingStatus status = 1;
}

// GetAdvancedPredictionRequest generates detailed predictions with multiple models
message GetAdvancedPredictionRequest
{
  string item_id = 1;                   // Required: item to predict
    google.protobuf.Timestamp target_time = 2; // When to predict for
    repeated PredictionModel models = 3;   // Models to use (empty = use best available)
  bool include_confidence_intervals = 4; // Whether to include bounds
}

message GetAdvancedPredictionResponse
{
    repeated ConsumptionPrediction predictions = 1; // One per model
    ConsumptionPrediction consensus_prediction = 2; // Ensemble prediction
}

// GetModelFitnessRequest retrieves fitness data for prediction models
message GetModelFitnessRequest
{
  string item_id = 1;                   // Required: item identifier
    repeated PredictionModel models = 2;   // Models to get fitness for (empty = all)
}

message GetModelFitnessResponse
{
    repeated PredictionModelFitness fitness_data = 1;
}

// UpdateModelFitnessRequest updates fitness tracking with new observations
message UpdateModelFitnessRequest
{
  string item_id = 1;
    PredictionModel model = 2;
  double actual_value = 3;              // What actually happened
  double predicted_value = 4;           // What the model predicted
    google.protobuf.Timestamp observation_time = 5;
}

message UpdateModelFitnessResponse
{
    PredictionModelFitness updated_fitness = 1;
}

// SetPredictionConfigRequest configures which models are enabled
message SetPredictionConfigRequest
{
    PredictionConfig config = 1;
}

message SetPredictionConfigResponse
{
    PredictionConfig config = 1;
}

// GetPredictionConfigRequest retrieves prediction configuration
message GetPredictionConfigRequest
{
  string item_id = 1;
}

message GetPredictionConfigResponse
{
    PredictionConfig config = 1;
}

//========================================
// SERVICE DEFINITION
//========================================

// InventoryService provides comprehensive inventory management
service InventoryService
{
    // Item management
    rpc AddInventoryItem(AddInventoryItemRequest) returns (AddInventoryItemResponse);
    rpc GetInventoryItem(GetInventoryItemRequest) returns (GetInventoryItemResponse);
    rpc ListInventoryItems(ListInventoryItemsRequest) returns (ListInventoryItemsResponse);
    rpc UpdateInventoryLevel(UpdateInventoryLevelRequest) returns (UpdateInventoryLevelResponse);

    // Status and reporting
    rpc GetInventoryStatus(GetInventoryStatusRequest) returns (GetInventoryStatusResponse);

    // Basic consumption prediction
    rpc PredictConsumption(PredictConsumptionRequest) returns (PredictConsumptionResponse);
    rpc SetConsumptionBehavior(SetConsumptionBehaviorRequest) returns (SetConsumptionBehaviorResponse);

    // Advanced prediction and training
    rpc SubmitInventoryReport(SubmitInventoryReportRequest) returns (SubmitInventoryReportResponse);
    rpc GetPredictionTrainingStatus(GetPredictionTrainingStatusRequest) returns (GetPredictionTrainingStatusResponse);
    rpc StartTraining(StartTrainingRequest) returns (StartTrainingResponse);
    rpc GetAdvancedPrediction(GetAdvancedPredictionRequest) returns (GetAdvancedPredictionResponse);

    // Unit conversion
    rpc ConvertUnits(ConvertUnitsRequest) returns (ConvertUnitsResponse);
}
