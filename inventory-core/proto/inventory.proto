syntax = "proto3";

package inventory.v1;

option go_package = "github.com/DaDevFox/task-systems/inventory-core/pkg/proto/inventory/v1";

import "google/protobuf/timestamp.proto";

//========================================
// ENUM DEFINITIONS  
//========================================

// UnitType defines the type of measurement unit
enum UnitType {
  UNIT_TYPE_UNSPECIFIED = 0;
  UNIT_TYPE_WEIGHT = 1;      // kg, lbs, grams, etc.
  UNIT_TYPE_VOLUME = 2;      // liters, cups, gallons, etc.
  UNIT_TYPE_COUNT = 3;       // items, pieces, etc.
  UNIT_TYPE_LENGTH = 4;      // meters, feet, inches, etc.
  UNIT_TYPE_AREA = 5;        // square meters, acres, etc.
}

// ConsumptionPattern defines how an item is typically consumed
enum ConsumptionPattern {
  CONSUMPTION_PATTERN_UNSPECIFIED = 0;
  CONSUMPTION_PATTERN_LINEAR = 1;        // Steady, consistent usage
  CONSUMPTION_PATTERN_SEASONAL = 2;      // Varies by season/time of year
  CONSUMPTION_PATTERN_BATCH = 3;         // Used in large amounts at once
  CONSUMPTION_PATTERN_RANDOM = 4;        // Unpredictable usage
}

// TrainingStage defines the current training phase for prediction models
enum TrainingStage {
  TRAINING_STAGE_UNSPECIFIED = 0;
  TRAINING_STAGE_COLLECTING = 1;         // Actively collecting training data
  TRAINING_STAGE_LEARNING = 2;           // Processing collected data
  TRAINING_STAGE_TRAINED = 3;            // Model is trained and active
  TRAINING_STAGE_RETRAINING = 4;         // Model being retrained with new data
}

// PredictionModel defines available prediction algorithms (DEPRECATED - use PredictionModelConfig oneof instead)
enum PredictionModel {
  PREDICTION_MODEL_UNSPECIFIED = 0;
  PREDICTION_MODEL_MARKOV = 1 [deprecated = true];           // Finite state consumption model
  PREDICTION_MODEL_CROSTON = 2 [deprecated = true];          // Intermittent demand forecasting
  PREDICTION_MODEL_DRIFT_IMPULSE = 3 [deprecated = true];    // Physical system with drift and impulses
  PREDICTION_MODEL_BAYESIAN = 4 [deprecated = true];         // Bayesian inference with confidence intervals
  PREDICTION_MODEL_MEMORY_WINDOW = 5 [deprecated = true];    // Memory-augmented rolling windows
  PREDICTION_MODEL_EVENT_TRIGGER = 6 [deprecated = true];    // Temporal event trigger modeling
  PREDICTION_MODEL_PARAMETRIC = 7;                           // Simple parametric consumption model (default)
}

//========================================
// PREDICTION MODEL CONFIGURATIONS
//========================================

// ParametricModel defines different types of parametric consumption models
message ParametricModel {
  oneof model_type {
    LinearEquationModel linear = 1;
    LogisticEquationModel logistic = 2;
  }
}

// LinearEquationModel represents linear growth/decay: y = base_level + slope * time
message LinearEquationModel {
  double slope = 1;                     // Units consumed per day (negative for decay, positive for growth)
  double base_level = 2;                // Initial level at time t=0
  double noise_variance = 3;            // Optional: variance for uncertainty bounds
}

// LogisticEquationModel represents population-style growth: dP/dt = r*P*(1 - P/K)
message LogisticEquationModel {
  double growth_rate = 1;               // Growth/decay rate parameter (r)
  double carrying_capacity = 2;         // Target population/level (K) 
  double initial_population = 3;        // Starting level (P0)
  double noise_variance = 4;            // Optional: variance for uncertainty bounds
}

// PredictionModelConfig defines prediction model configuration using oneof
message PredictionModelConfig {
  oneof model_config {
    ParametricModel parametric = 1;     // Simple parametric consumption model (recommended)
    
    // Deprecated models - kept for backward compatibility but not recommended
    MarkovModelConfig markov = 2 [deprecated = true];
    CrostonModelConfig croston = 3 [deprecated = true];
    DriftImpulseModelConfig drift_impulse = 4 [deprecated = true];
    BayesianModelConfig bayesian = 5 [deprecated = true];
    MemoryWindowModelConfig memory_window = 6 [deprecated = true];
    EventTriggerModelConfig event_trigger = 7 [deprecated = true];
  }
}

// Legacy model configurations (DEPRECATED - use ParametricModel instead)
message MarkovModelConfig {
  option deprecated = true;
  double low_threshold = 1;
  double depleted_threshold = 2;
}

message CrostonModelConfig {
  option deprecated = true;
  double alpha = 1;                     // Smoothing parameter
}

message DriftImpulseModelConfig {
  option deprecated = true;
  double drift_smoothing = 1;
}

message BayesianModelConfig {
  option deprecated = true;
  double prior_strength = 1;
}

message MemoryWindowModelConfig {
  option deprecated = true;
  double decay_factor = 1;
  int32 window_size = 2;
}

message EventTriggerModelConfig {
  option deprecated = true;
  // Configuration parameters for event trigger model
}

//========================================
// HISTORY AND TRACKING MESSAGE DEFINITIONS
//========================================

// HistoryGranularity defines the granularity for historical data requests
enum HistoryGranularity {
  HISTORY_GRANULARITY_UNSPECIFIED = 0;
  HISTORY_GRANULARITY_MINUTE = 1;       // Data points every minute
  HISTORY_GRANULARITY_HOUR = 2;         // Data points every hour  
  HISTORY_GRANULARITY_DAY = 3;          // Data points every day
  HISTORY_GRANULARITY_WEEK = 4;         // Data points every week
  HISTORY_GRANULARITY_MONTH = 5;        // Data points every month
}

// InventoryLevelSnapshot represents inventory level at a specific point in time
message InventoryLevelSnapshot {
  google.protobuf.Timestamp timestamp = 1;  // When this level was recorded
  double level = 2;                         // The inventory level at this time
  string unit_id = 3;                       // The unit for the level
  string source = 4;                        // Source of this data (e.g., "user_report", "system_update")
  string context = 5;                       // Optional context about this snapshot
  map<string, string> metadata = 6;        // Additional metadata about this snapshot
}

//========================================
// CORE MESSAGE DEFINITIONS
//========================================

// Unit represents a measurement unit with conversion capabilities
message Unit {
  string id = 1;                        // Unique unit identifier
  string name = 2;                      // Human-readable name
  string symbol = 3;                    // Display symbol  
  string description = 4;               // Optional description
  double base_conversion_factor = 5;    // Factor to convert to base unit
  string category = 6;                  // Category or type (weight, volume, etc.)
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
  map<string, string> metadata = 9;    // Custom key-value pairs
}

// ConsumptionBehavior defines how an item is consumed over time
message ConsumptionBehavior {
  ConsumptionPattern pattern = 1;       // Type of consumption pattern
  double average_rate_per_day = 2;      // Average consumption per day
  double variance = 3;                  // Variance in consumption (for uncertainty)
  repeated double seasonal_factors = 4;  // Monthly multipliers (12 values, Jan-Dec)
  google.protobuf.Timestamp last_updated = 5;
}



// InventoryItem represents a single item in inventory
message InventoryItem {
  string id = 1;                        // Unique identifier
  string name = 2;                      // Human-readable name
  string description = 3;               // Optional description
  double current_level = 4;             // Current quantity available
  double max_capacity = 5;              // Maximum storage capacity
  double low_stock_threshold = 6;       // Alert when below this level
  string unit_id = 7;                   // Primary unit for this item
  repeated string alternate_unit_ids = 8; // Other valid units for this item
  ConsumptionBehavior consumption_behavior = 9;
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp updated_at = 12;
  map<string, string> metadata = 13;   // Custom key-value pairs
  
  // Active prediction model configuration (defaults to parametric model)
  PredictionModelConfig active_prediction_model = 14;
}

// InventoryStatus provides overview of inventory state
message InventoryStatus {
  repeated InventoryItem items = 1;
  repeated InventoryItem low_stock_items = 2;
  repeated InventoryItem empty_items = 3;
  int32 total_items = 4;
  google.protobuf.Timestamp last_updated = 5;
}

// ConsumptionPrediction provides forecasted usage for an item
message ConsumptionPrediction {
  string item_id = 1;
  double predicted_days_remaining = 2;  // How many days until empty
  double confidence_score = 3;          // 0.0 to 1.0, how confident we are
  google.protobuf.Timestamp predicted_empty_date = 4;
  double recommended_restock_level = 5; // Suggested amount to restock
  string prediction_model = 6;          // Which algorithm was used
  double estimate = 7;                  // Predicted level at target time
  double lower_bound = 8;               // Lower confidence bound
  double upper_bound = 9;               // Upper confidence bound
  string recommendation = 10;           // Human-readable recommendation
}

// PredictionTrainingStatus tracks training progress for prediction models
message PredictionTrainingStatus {
  string item_id = 1;
  TrainingStage stage = 2;
  PredictionModel active_model = 3 [deprecated = true];  // Use active_model_config instead
  repeated PredictionModel available_models = 4 [deprecated = true]; // Use available_model_configs instead
  int32 training_samples = 5;           // Number of data points collected
  int32 min_samples_required = 6;       // Minimum samples needed for training
  double training_accuracy = 7;         // Model accuracy (0.0 to 1.0)
  google.protobuf.Timestamp training_started = 8;
  google.protobuf.Timestamp last_updated = 9;
  map<string, double> model_parameters = 10 [deprecated = true]; // Use active_model_config instead
  
  // New fields using model configurations
  PredictionModelConfig active_model_config = 11;           // Currently active model configuration
  repeated PredictionModelConfig available_model_configs = 12; // Available model configurations
}

// InventoryReport represents a user report during training or operation
message InventoryReport {
  string item_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  double level = 3;
  string unit_id = 4;
  string context = 5;                   // Optional context (e.g., "after dinner", "weekend")
  bool is_training_data = 6;            // Whether this is for model training
  map<string, string> metadata = 7;    // Additional contextual information
}

//========================================
// REQUEST/RESPONSE MESSAGE DEFINITIONS
//========================================

// AddInventoryItemRequest creates a new inventory item
message AddInventoryItemRequest {
  string name = 1;                      // Required: item name
  string description = 2;               // Optional: item description
  double initial_level = 3;             // Starting quantity
  double max_capacity = 4;              // Maximum storage capacity
  double low_stock_threshold = 5;       // Alert threshold
  string unit_id = 6;                   // Primary unit
  map<string, string> metadata = 7;    // Custom properties
}

message AddInventoryItemResponse {
  InventoryItem item = 1;
}

// UpdateInventoryLevelRequest changes the quantity of an item
message UpdateInventoryLevelRequest {
  string item_id = 1;                   // Required: item to update
  double new_level = 2;                 // New quantity level
  string reason = 3;                    // Optional: reason for change
  bool record_consumption = 4;          // Whether to record as consumption
}

message UpdateInventoryLevelResponse {
  InventoryItem item = 1;
  bool level_changed = 2;
  bool below_threshold = 3;             // Whether item is now below threshold
}

// GetInventoryStatusRequest retrieves overall inventory state
message GetInventoryStatusRequest {
  bool include_low_stock_only = 1;      // Filter to only low stock items
  repeated string item_ids = 2;         // Optional: filter to specific items
}

message GetInventoryStatusResponse {
  InventoryStatus status = 1;
}

// PredictConsumptionRequest generates usage forecasts
message PredictConsumptionRequest {
  string item_id = 1;                   // Required: item to predict
  int32 days_ahead = 2;                 // How many days to forecast (default: 30)
  bool update_behavior = 3;             // Whether to update consumption behavior
}

message PredictConsumptionResponse {
  ConsumptionPrediction prediction = 1;
}

// SetConsumptionBehaviorRequest configures how an item is consumed
message SetConsumptionBehaviorRequest {
  string item_id = 1;                   // Required: item to configure
  ConsumptionBehavior behavior = 2;     // Consumption behavior settings
}

message SetConsumptionBehaviorResponse {
  InventoryItem item = 1;
}

// GetInventoryItemRequest retrieves a single item
message GetInventoryItemRequest {
  string item_id = 1;                   // Required: item identifier
}

message GetInventoryItemResponse {
  InventoryItem item = 1;
}

// ListInventoryItemsRequest retrieves filtered list of items
message ListInventoryItemsRequest {
  bool low_stock_only = 1;              // Filter to low stock items
  string unit_type_filter = 2;          // Filter by unit type
  int32 limit = 3;                      // Maximum items to return
  int32 offset = 4;                     // Pagination offset
}

message ListInventoryItemsResponse {
  repeated InventoryItem items = 1;
  int32 total_count = 2;                // Total items matching filter
}

// ConvertUnitsRequest converts quantities between units
message ConvertUnitsRequest {
  double amount = 1;                    // Quantity to convert
  string from_unit_id = 2;              // Source unit
  string to_unit_id = 3;                // Target unit
}

message ConvertUnitsResponse {
  double converted_amount = 1;          // Result of conversion
  bool conversion_possible = 2;         // Whether conversion was possible
  string error_message = 3;             // Error if conversion failed
}

// ListUnitsRequest retrieves all unit definitions
message ListUnitsRequest {
  // No filters needed for initial implementation
}

message ListUnitsResponse {
  repeated Unit units = 1;              // List of all available units
  int32 total_count = 2;                // Total number of units
}

// AddUnitRequest creates a new unit definition
message AddUnitRequest {
  string name = 1;                      // Required: human-readable name
  string symbol = 2;                    // Required: display symbol
  string description = 3;               // Optional: description
  double base_conversion_factor = 4;    // Required: factor to convert to base unit
  string category = 5;                  // Optional: category or type (weight, volume, etc.)
  map<string, string> metadata = 6;    // Optional: custom key-value pairs
}

message AddUnitResponse {
  Unit unit = 1;                        // The created unit
  bool unit_created = 2;                // Whether the unit was successfully created
}

// GetUnitRequest retrieves a specific unit by ID
message GetUnitRequest {
  string unit_id = 1;                   // Required: unit identifier
}

message GetUnitResponse {
  Unit unit = 1;                        // The requested unit
}

// UpdateUnitRequest updates an existing unit definition
message UpdateUnitRequest {
  string unit_id = 1;                   // Required: unit identifier to update
  string name = 2;                      // Human-readable name
  string symbol = 3;                    // Display symbol
  string description = 4;               // Description
  double base_conversion_factor = 5;    // Factor to convert to base unit
  string category = 6;                  // Category or type (weight, volume, etc.)
  map<string, string> metadata = 7;    // Custom key-value pairs
}

message UpdateUnitResponse {
  Unit unit = 1;                        // The updated unit
  bool unit_changed = 2;                // Whether any changes were made
}

// DeleteUnitRequest removes a unit definition
message DeleteUnitRequest {
  string unit_id = 1;                   // Required: unit identifier to delete
  bool force = 2;                       // Optional: force deletion even if unit is in use
}

message DeleteUnitResponse {
  bool unit_deleted = 1;                // Whether the unit was successfully deleted
  string deleted_unit_id = 2;           // ID of the deleted unit
  string deleted_unit_name = 3;         // Name of the deleted unit for confirmation
}

// SubmitInventoryReportRequest submits a user report for training or updates
message SubmitInventoryReportRequest {
  InventoryReport report = 1;           // Required: the inventory report
}

message SubmitInventoryReportResponse {
  bool training_updated = 1;            // Whether training was affected
  PredictionTrainingStatus training_status = 2; // Current training status
}

// GetPredictionTrainingStatusRequest retrieves training status
message GetPredictionTrainingStatusRequest {
  string item_id = 1;                   // Required: item identifier
}

message GetPredictionTrainingStatusResponse {
  PredictionTrainingStatus status = 1;
}

// StartTrainingRequest begins training for an item with a specific model
message StartTrainingRequest {
  string item_id = 1;                   // Required: item to train
  PredictionModel model = 2 [deprecated = true]; // Use model_config instead
  int32 min_samples = 3;                // Minimum samples before training (default: 10)
  map<string, double> parameters = 4 [deprecated = true]; // Use model_config instead
  
  // New field using model configuration
  PredictionModelConfig model_config = 5; // Model configuration to use for training
}

message StartTrainingResponse {
  PredictionTrainingStatus status = 1;
}

// UpdateInventoryItemRequest updates metadata and configuration of an inventory item
message UpdateInventoryItemRequest {
  string item_id = 1;                   // Required: item to update
  string name = 2;                      // Item name
  string description = 3;               // Item description
  double max_capacity = 4;              // Maximum storage capacity
  double low_stock_threshold = 5;       // Alert threshold
  string unit_id = 6;                   // Primary unit
  repeated string alternate_unit_ids = 7; // Other valid units
  ConsumptionBehavior consumption_behavior = 8; // Consumption behavior settings
  map<string, string> metadata = 9;    // Custom properties
}

message UpdateInventoryItemResponse {
  InventoryItem item = 1;               // Updated item
  bool item_changed = 2;                // Whether any changes were made
}

// RemoveInventoryItemRequest removes an inventory item from the system
message RemoveInventoryItemRequest {
  string item_id = 1;                   // Required: item identifier to remove
}

message RemoveInventoryItemResponse {
  bool item_removed = 1;                // Whether the item was successfully removed
  string removed_item_id = 2;           // ID of the removed item
  string removed_item_name = 3;         // Name of the removed item for confirmation
}

// GetAdvancedPredictionRequest generates detailed predictions with multiple models
message GetAdvancedPredictionRequest {
  string item_id = 1;                   // Required: item to predict
  google.protobuf.Timestamp target_time = 2; // When to predict for
  repeated PredictionModel models = 3 [deprecated = true];   // Use model_configs instead
  bool include_confidence_intervals = 4; // Whether to include bounds
  
  // New field using model configurations
  repeated PredictionModelConfig model_configs = 5; // Model configs to use (empty = use active model)
}

message GetAdvancedPredictionResponse {
  repeated ConsumptionPrediction predictions = 1; // One per model
  ConsumptionPrediction consensus_prediction = 2; // Ensemble prediction
}

// SetActivePredictionModelRequest configures the active prediction model for an item
message SetActivePredictionModelRequest {
  string item_id = 1;                   // Required: item to configure
  PredictionModelConfig model_config = 2; // Model configuration to activate
}

message SetActivePredictionModelResponse {
  InventoryItem item = 1;               // Updated item with new active model
  bool model_changed = 2;               // Whether the model was changed
}

// GetActivePredictionModelRequest retrieves the active prediction model for an item
message GetActivePredictionModelRequest {
  string item_id = 1;                   // Required: item identifier
}

message GetActivePredictionModelResponse {
  PredictionModelConfig model_config = 1; // Active model configuration
  bool has_active_model = 2;            // Whether an active model is set
}

// GetItemHistoryRequest retrieves historical inventory levels for an item
message GetItemHistoryRequest {
  string item_id = 1;                   // Required: item identifier
  
  // Query parameters - choose one query method
  oneof query_params {
    TimeRangeQuery time_range = 2;      // Query by time range with optional granularity
    CountBasedQuery count_based = 3;    // Query by number of data points
    TimePointQuery time_point = 4;      // Query from a specific time point backwards
  }
}

// TimeRangeQuery requests data within a specific time range
message TimeRangeQuery {
  google.protobuf.Timestamp start_time = 1;  // Start of the time interval
  google.protobuf.Timestamp end_time = 2;    // End of the time interval  
  HistoryGranularity granularity = 3;        // Optional: desired granularity of data points
  int32 max_points = 4;                      // Optional: maximum number of data points to return
}

// CountBasedQuery requests the most recent N data points
// PERFORMANCE NOTE: This is the most efficient query type for recent data
message CountBasedQuery {
  int32 count = 1;                           // Required: number of recent data points to retrieve
}

// TimePointQuery requests all data points from a specific time backwards
// PERFORMANCE NOTE: This can be less performant for very distant time points with large datasets
message TimePointQuery {
  google.protobuf.Timestamp from_time = 1;   // Required: get all data from this time backwards to present
  int32 max_points = 2;                      // Optional: maximum number of data points to return (most recent first)
}

message GetItemHistoryResponse {
  repeated InventoryLevelSnapshot history = 1;  // Historical inventory levels
  int32 total_points = 2;                      // Total number of data points available
  bool more_data_available = 3;               // Whether more data exists beyond max_points
  google.protobuf.Timestamp earliest_timestamp = 4; // Earliest available data timestamp
  google.protobuf.Timestamp latest_timestamp = 5;   // Latest available data timestamp
}

//========================================
// SERVICE DEFINITION
//========================================

// InventoryService provides comprehensive inventory management
service InventoryService {
  // Item management
  rpc AddInventoryItem(AddInventoryItemRequest) returns (AddInventoryItemResponse);
  rpc GetInventoryItem(GetInventoryItemRequest) returns (GetInventoryItemResponse);
  rpc ListInventoryItems(ListInventoryItemsRequest) returns (ListInventoryItemsResponse);
  rpc UpdateInventoryItem(UpdateInventoryItemRequest) returns (UpdateInventoryItemResponse);
  rpc RemoveInventoryItem(RemoveInventoryItemRequest) returns (RemoveInventoryItemResponse);
  rpc UpdateInventoryLevel(UpdateInventoryLevelRequest) returns (UpdateInventoryLevelResponse);
  
  // Status and reporting
  rpc GetInventoryStatus(GetInventoryStatusRequest) returns (GetInventoryStatusResponse);
  
  // Basic consumption prediction
  rpc PredictConsumption(PredictConsumptionRequest) returns (PredictConsumptionResponse);
  rpc SetConsumptionBehavior(SetConsumptionBehaviorRequest) returns (SetConsumptionBehaviorResponse);
  
  // Prediction model management
  rpc SetActivePredictionModel(SetActivePredictionModelRequest) returns (SetActivePredictionModelResponse);
  rpc GetActivePredictionModel(GetActivePredictionModelRequest) returns (GetActivePredictionModelResponse);
  
  // Advanced prediction and training
  rpc SubmitInventoryReport(SubmitInventoryReportRequest) returns (SubmitInventoryReportResponse);
  rpc GetPredictionTrainingStatus(GetPredictionTrainingStatusRequest) returns (GetPredictionTrainingStatusResponse);
  rpc StartTraining(StartTrainingRequest) returns (StartTrainingResponse);
  rpc GetAdvancedPrediction(GetAdvancedPredictionRequest) returns (GetAdvancedPredictionResponse);
  
  // Unit management
  rpc ListUnits(ListUnitsRequest) returns (ListUnitsResponse);
  rpc GetUnit(GetUnitRequest) returns (GetUnitResponse);
  rpc AddUnit(AddUnitRequest) returns (AddUnitResponse);
  rpc UpdateUnit(UpdateUnitRequest) returns (UpdateUnitResponse);
  rpc DeleteUnit(DeleteUnitRequest) returns (DeleteUnitResponse);
  
  // Unit conversion
  rpc ConvertUnits(ConvertUnitsRequest) returns (ConvertUnitsResponse);
  
  // History tracking
  rpc GetItemHistory(GetItemHistoryRequest) returns (GetItemHistoryResponse);
}